<?xml version="1.0" encoding="UTF-8"?>
<project name="konywidgets" basedir="."  default="all">

	<target name="init">
		<taskdef resource="com/kony/ant/antkonyscript.properties">
		  <classpath>
				<pathelement location="${plugin.loc}/lib/KonyAntScript.jar"/>
		  </classpath>
		</taskdef>
		<taskdef resource="net/sf/antcontrib/antcontrib.properties">
	      <classpath>
	        <pathelement location="${plugin.loc}/lib/ant-contrib-0.6.jar"/>
	      </classpath>
	    </taskdef>
		<property name="extres" value="${android.plugin.loc}/luaandroid/extres"/>
		<property name="extlibs" value="${android.plugin.loc}/luaandroid/extlibs"/>	
		<property name="DoubleQuotes" value="&quot;"/>
		<taskdef name="escapejssource" classname="com.konylabs.android.anttask.EscapeJavaScriptSourceTask">
			<classpath>
				<pathelement location="${extres}/EscapeJavaScriptSourceTask.jar"/>
				<pathelement location="${extres}/commons-lang-2.6.jar"/>
			</classpath>
		</taskdef>		
		<if>
			<equals arg1="${isFPbuild}" arg2="$${isFPbuild}"/>
			<then>
				<property name="isFPbuild" value="false"/>
			</then>
		</if>		
		<if>
			<equals arg1="${isFPbuild}" arg2="true"/>
			<then>
				<property name="currentfile" value="fpapp.xml"/>			
				<property name="enablesearchbar.local" value="true"/>
				<property name="build.option.local" value="debug"/>
				<property name="isIncrementalBuild.local" value="false"/>
				<property name="enableJSBindings" value="true"/>				
			</then>
			<else>
				<property name="currentfile" value="build.xml"/>
				<property name="enablesearchbar.local" value="${enablesearchbar}"/>	
				<property name="build.option.local" value="${build.option}"/>
				<property name="isIncrementalBuild.local" value="${isIncrementalBuild}"/>				
			</else>
		</if>		
	    <if>
        	<available file="${project.loc}/androidbuild.properties" />
        	<then>
		<loadproperties srcFile="${project.loc}/androidbuild.properties"/>
		</then>
	</if>	
	<if>
        	<available file="${project.loc}/../androidBuildRequiredPaths.properties" />
        	<then>
		<loadproperties srcFile="${project.loc}/../androidBuildRequiredPaths.properties"/>
		</then>
	</if>	
		 <loadproperties srcFile="${extres}/buildparams.properties"/>			
		<property name="tab" value="&#x0009;"/>
		<if>
			<equals arg1="${usegoogleplaylocationservices}" arg2="$${usegoogleplaylocationservices}"/>
			<then>
				<property name="usegoogleplaylocationservices.local" value="false"/>
			</then>
			<else>
				<property name="usegoogleplaylocationservices.local" value="${usegoogleplaylocationservices}"/>
			</else>
		</if>	
		<echo>isLibraryBuild :: ${isLibraryBuild}</echo>
		<echo>supportx86 :: ${supportx86}</echo>
		<echo>support64bit :: ${support64bit}</echo>
		<echo>UseSQLCipherFIPS :: ${UseSQLCipherFIPS}</echo>
		<echo>UseOpenSSLLibrary :: ${UseOpenSSLLibrary}</echo>
		<echo>enablecharts2d3d :: ${enablecharts2d3d}</echo>
		<if>
		    <equals arg1="${enablecharts2d3d}" arg2="false" />	
		<then>
		      <if>
			       <equals arg1="${support64bit}" arg2="true" />
		      <then>
			       <property name="bundle64bitlibs" value="true"/>
				   <if>
					  <and>
						<equals arg1="${UseOpenSSLLibrary}" arg2="false" />
						<equals arg1="${UseSQLCipherFIPS}" arg2="false"/>	
					  </and>
				   <then>
					    <echo>UseOpenSSLLibrary and UseSQLCipherFIPS is false so setting x86_64 true</echo>
						<property name="bundlex8664bitlibs" value="true"/>
				   </then>
				   <else>
					     <property name="bundlex8664bitlibs" value="false"/>
				   </else>			
				   </if>
		      </then>
		      </if>
		</then>
		<else>
			<property name="bundle64bitlibs" value="false"/>
			<property name="bundlex8664bitlibs" value="false"/>
		</else>
	    </if>
		<echo> bundle64bitlibs  :: ${bundle64bitlibs}</echo>
	    <echo> bundlex8664bitlibs  :: ${bundlex8664bitlibs}</echo>
		<property name="outputfolder" value="${appfolder}/output/lua"/>
		<property environment="env"/>
		<property name="dist.dir" value="${basedir}/dist"/>
		<property name="konyapp.dir" location="${resfolder}/../"/>
		<echo>konyapp.dir = ${konyapp.dir}</echo>
		<echo>isIncrementalBuild = ${isIncrementalBuild.local}</echo>
		<condition property="codedir" value="js" else="lua">
			<equals arg1="js" arg2="${dev.language}" casesensitive="false" trim="true"/>
		</condition>
		<condition property="outputdir" value="jsoutput" else="output">
			<equals arg1="js" arg2="${dev.language}" casesensitive="false" trim="true"/>
		</condition>
		<if>
			<equals arg1="${isFPbuild}" arg2="false"/>
			<then>
				<echo>isUniversalApp = ${isUniversalApp}</echo>
				<condition property="isWatchBuild.Local" value = "true" else = "false">
					<and>
						<not>
							<equals arg1="${isWatchBuild}" arg2="$${isWatchBuild}"/>
						</not>
						<equals arg1="${isWatchBuild}" arg2="true"/>
					</and>                     
			   </condition>        
				 <if>
					<equals arg1="${isWatchBuild.Local}" arg2="true"/>               
					<then>
					   <property name="jssrc.dir" value="${resfolder}/../jssrc/androidwearos"/>
					</then>
					<else>
					 <property name="jssrc.dir" value="${resfolder}/../jssrc/android"/>
					</else>
				</if>

				<if>
					<equals arg1="${nativecodegen}" arg2="true"/>
					<then>
						<property name="app.dir" value="${dist.dir}/${appid}_native"/>
					</then>
				</if>
				<if>
					<equals arg1="${hybridmode}" arg2="native"/>
					<then>
						<property name="app.dir" value="${dist.dir}/${appid}"/>
					</then>
				<else>
					<if>
						<equals arg1="${hybridmode}" arg2="wrapper"/>
						<then>
							<property name="app.dir" value="${dist.dir}/${appid}_wrapper"/>
							<property name="hybridmode.dir" value="${appfolder}/${outputdir}/spaandroidwrapper"/>
						</then>
					<else>
						<if>
							<equals arg1="${hybridmode}" arg2="mixed"/>
							<then>
								<property name="app.dir" value="${dist.dir}/${appid}_mixed"/>
								<property name="hybridmode.dir" value="${appfolder}/${outputdir}/spaandroidmixed"/>
							</then>
						</if>
					</else>
					</if>
				</else>
				</if>
				<echo>resources.common.folder ... ${resources.common.folder}</echo>
				<echo>resources.platform.folder ... ${resources.platform.folder}</echo>
				<if>
					<or>
						<equals arg1="${resources.new.structure}" arg2="false"/>
						<equals arg1="${resources.new.structure}" arg2="$${resources.new.structure}"/>
					</or>
					<then>
						<property name="resources.common.folder" value="common"/>
						<property name="resources.platform.folder" value="${resource.platform.folder}"/>
						<property name="resources.mobile.web" value="mobilethinclient"/>
					</then>
				</if>				
			</then>
			<else>
				<property name="app.dir" value="${basedir}"/>			
			</else>
		</if>
		<echo>automation mode ${enableAutomation}</echo>
		<if>
			<and>
				<equals arg1="${build.option.local}" arg2="debug"/>
				<equals arg1="${enableAutomation}" arg2="true"/>
			</and>
			<then>
				<echo>automation mode enabled</echo>
				<property name="automationEnabled" value="true" />
				<property name="automationMode" value="playback" />
			</then>
		</if>
		<property name="assets.dir" value="${app.dir}/assets"/>
		<property name="libs.dir" value="${app.dir}/libs"/>
		<property name="src.dir" value="${app.dir}/src"/>		
	</target>
	    
    <target name="copyjar">
		<if>
			<equals arg1="${isFPbuild}" arg2="false"/>
			<then>
				<available file="${app.dir}" type="dir"  property="appdir.present"/>
				<echo>isIncrementalBuild = ${isIncrementalBuild.local} and appdir.present = ${appdir.present}</echo>
				<mkdir dir="${dist.dir}"/>
				<mkdir dir="${app.dir}"/>
				<unjar src="codegen.jar" dest="${app.dir}" overwrite="true"/>
			</then>
			<else>
				<echo>Copying libs from codegen plugin...</echo>
				<mkdir dir="${app.dir}/codegentemp"/>
				<unjar src="${android.plugin.loc}/luaandroid/codegen.jar" dest="${app.dir}/codegentemp"/>			
				<move file="${app.dir}/res" tofile="${app.dir}/res_fp"/>				
				<copydir src="${app.dir}/codegentemp/" dest="${app.dir}" forceoverwrite="true">
					<patternset>
						<exclude name="assets/**"/>	
					</patternset>
				</copydir>									
				<copydir src="${app.dir}/res_fp" dest="${app.dir}/res" forceoverwrite="true"/>
				<copy file="${app.dir}/codegentemp/res/values/strings.xml" tofile="${app.dir}/res/values/strings.xml" overwrite="true"/>
				<delete dir="${app.dir}/codegentemp"/>		
				<delete dir="${app.dir}/res_fp"/>
			</else>
		</if>	
    </target>
	
    <target name="copyextlibs">
	<echo>Copying extlibs ... dev.language = ${dev.language}</echo>
	<echo>allowselfsignedcertificates = ${allowselfsignedcertificates}</echo>
		<if>
			<equals arg1="${allowselfsignedcertificates}" arg2="All"/>
			<then>
				<echo>Copying KonyAllowAllTrustManager</echo>
				<copy file="${extlibs}/KonyAllowAllTrustManager.jar" tofile="${app.dir}/libs/KonyAllowAllTrustManager.jar" overwrite="true"/>
			</then>
		</if>
		<if>
			<equals arg1="${enablecharts2d3d}" arg2="true"/>
			<then>
				<copy file="${extlibs}/konychart2d3dengineNeXt.jar" tofile="${app.dir}/libs/konychart2d3dengineNeXt.jar" overwrite="true"/>
				<copy file="${extlibs}/armeabi-v7a/libKLChartWidgetNeXt.so" tofile="${app.dir}/libs/armeabi-v7a/libKLChartWidgetNeXt.so" overwrite="true"/>
				<copy file="${extres}/actualLetters.png" tofile="${app.dir}/assets/actualLetters.png" overwrite="true"/>
				<if>
					<equals arg1="${supportx86}" arg2="true"/>
					<then>
						<copy file="${extlibs}/x86/libKLChartWidgetNeXt.so" tofile="${app.dir}/libs/x86/libKLChartWidgetNeXt.so" overwrite="true"/>
					</then>
				</if>
			</then>
		</if>
		<if>
			<equals arg1="${enablefileupload}" arg2="true"/>
			<then>
				<!-- This is not required as higher version of the same class httpmime is being copied. 
				<copy file="${extlibs}/httpmime-4.1.jar" tofile="${app.dir}/libs/httpmime-4.1.jar" overwrite="true"/>
				-->
				<!-- httpmime-4.3.6.jar and httpcore-4.3.3.jar are being used in multipart fileupload feature -->
				<copy file="${extlibs}/httpcore-4.3.3.jar" tofile="${app.dir}/libs/httpcore-4.3.3.jar" overwrite="true"/>
				<copy file="${extlibs}/httpmime-4.3.6.jar" tofile="${app.dir}/libs/httpmime-4.3.6.jar" overwrite="true"/>
			</then>
		</if>
		<if>
			<equals arg1="${dev.language}" arg2="js"/>
			<then>
				<if>
					<equals arg1="${bundle64bitlibs}" arg2="true"/>
					<then>
						<copy file="${extlibs}/arm64-v8a/libc++_shared.so" tofile="${app.dir}/libs/arm64-v8a/libc++_shared.so" overwrite="true"/>
						<if>
							<equals arg1="${supportx86}" arg2="true"/>
							<then>
							      <if>
							         <equals arg1="${bundlex8664bitlibs}" arg2="true"/>
							           <then>
								        <copy file="${extlibs}/x86_64/libc++_shared.so" tofile="${app.dir}/libs/x86_64/libc++_shared.so" overwrite="true"/>
							           </then>
							         <else>
							            <copy file="${extlibs}/x86/libc++_shared.so" tofile="${app.dir}/libs/x86/libc++_shared.so" overwrite="true"/>
							         </else>
						          </if>												
					        </then>
					    </if>
					</then>
					<else>
						<copy file="${extlibs}/armeabi-v7a/libc++_shared.so" tofile="${app.dir}/libs/armeabi-v7a/libc++_shared.so" overwrite="true"/>
						<if>
							<equals arg1="${supportx86}" arg2="true"/>
							<then>
								<copy file="${extlibs}/x86/libc++_shared.so" tofile="${app.dir}/libs/x86/libc++_shared.so" overwrite="true"/>
							</then>
						</if>						
					</else>
				</if>
				<if>
					<equals arg1="${build.option.local}" arg2="debug"/>
					<then>
						<if>
							<equals arg1="${bundle64bitlibs}" arg2="true"/>
							<then>
								<copy file="${extlibs}/arm64-v8a/libkonyjsvm_debug.so" tofile="${app.dir}/libs/arm64-v8a/libkonyjsvm.so" overwrite="true"/>
							</then>
							<else>
								<copy file="${extlibs}/armeabi-v7a/libkonyjsvm_debug.so" tofile="${app.dir}/libs/armeabi-v7a/libkonyjsvm.so" overwrite="true"/>
							</else>
						</if>
						<if>
							<equals arg1="${supportx86}" arg2="true"/>
							<then>
							      <if>
							         <equals arg1="${bundlex8664bitlibs}" arg2="true"/>
							           <then>
								        <copy file="${extlibs}/x86_64/libkonyjsvm_debug.so" tofile="${app.dir}/libs/x86_64/libkonyjsvm.so" overwrite="true"/>
							           </then>
							         <else>
							            <copy file="${extlibs}/x86/libkonyjsvm_debug.so" tofile="${app.dir}/libs/x86/libkonyjsvm.so" overwrite="true"/>
							         </else>
						          </if>												
					        </then>
					    </if>
						<copy file="${extlibs}/java_websocket.jar" tofile="${app.dir}/libs/java_websocket.jar" overwrite="true"/>
					</then>
					<elseif>
						<equals arg1="${build.option.local}" arg2="release"/>
						<then>
							<copy file="${extlibs}/konywidgets_release.jar" tofile="${app.dir}/libs/konywidgets.jar" overwrite="true"/>
							<if>
								<equals arg1="${bundle64bitlibs}" arg2="true"/>
								<then>
									<copy file="${extlibs}/arm64-v8a/libkonyjsvm_release.so" tofile="${app.dir}/libs/arm64-v8a/libkonyjsvm.so" overwrite="true"/>
								</then>
								<else>
									<copy file="${extlibs}/armeabi-v7a/libkonyjsvm_release.so" tofile="${app.dir}/libs/armeabi-v7a/libkonyjsvm.so" overwrite="true"/>
								</else>
							</if>
							<if>
								<equals arg1="${supportx86}" arg2="true"/>
								<then>
							      <if>
							         <equals arg1="${bundlex8664bitlibs}" arg2="true"/>
							           <then>
								        <copy file="${extlibs}/x86_64/libkonyjsvm_release.so" tofile="${app.dir}/libs/x86_64/libkonyjsvm.so" overwrite="true"/>
							           </then>
							         <else>
							            <copy file="${extlibs}/x86/libkonyjsvm_release.so" tofile="${app.dir}/libs/x86/libkonyjsvm.so" overwrite="true"/>
							         </else>
						          </if>												
								</then>
							</if>
						</then>					
					</elseif>
					<else>
						<copy file="${extlibs}/konywidgets-protected.jar" tofile="${app.dir}/libs/konywidgets.jar" overwrite="true"/>
						<copy file="${extres}/stringconstants.xml" tofile="${app.dir}/res/values/stringconstants.xml" overwrite="true"/>
						<if>
							<equals arg1="${bundle64bitlibs}" arg2="true"/>
							<then>
								<copy file="${extlibs}/arm64-v8a/libkonyjsvm_release_protected.so" tofile="${app.dir}/libs/arm64-v8a/libkonyjsvm.so" overwrite="true"/>
							</then>
							<else>
								<copy file="${extlibs}/armeabi-v7a/libkonyjsvm_release_protected.so" tofile="${app.dir}/libs/armeabi-v7a/libkonyjsvm.so" overwrite="true"/>
							</else>
						</if>
						<if>
							<equals arg1="${supportx86}" arg2="true"/>
							<then>
								 <if>
							         <equals arg1="${bundlex8664bitlibs}" arg2="true"/>
							           <then>
								        <copy file="${extlibs}/x86_64/libkonyjsvm_release_protected.so" tofile="${app.dir}/libs/x86_64/libkonyjsvm.so" overwrite="true"/>
							           </then>
							         <else>
							            <copy file="${extlibs}/x86/libkonyjsvm_release_protected.so" tofile="${app.dir}/libs/x86/libkonyjsvm.so" overwrite="true"/>
							         </else>
						          </if>	
							</then>
						</if>
					</else>
				</if>
			</then>
		</if>
		<if>
			<equals arg1="${UseSQLCipherFIPS}" arg2="true"/>
			<then>
				<!--Copy FIPS SQL libs and assets-->
				<copy todir="${app.dir}/libs/" overwrite="true">
					<fileset dir="${extlibs}/SQLCIPHER_FIPS/libs/" includes="*.jar"/>
				</copy>
				<if>
					<equals arg1="${bundle64bitlibs}" arg2="true"/>
					<then>
						<copydir src="${extlibs}/SQLCIPHER_FIPS/libs/arm64-v8a" dest="${app.dir}/libs/arm64-v8a" />
						<copydir src="${extlibs}/CryptoLib/arm64-v8a/"  dest="${app.dir}/assets" />
					</then>
					<else>
						<copydir src="${extlibs}/SQLCIPHER_FIPS/libs/armeabi-v7a" dest="${app.dir}/libs/armeabi-v7a" />
						<copydir src="${extlibs}/CryptoLib/armeabi-v7a/"  dest="${app.dir}/assets" />
					</else>
				</if>
				<!--Copy SQL Cipher interface jar-->
				<copy file="${extres}/konysqlcipher.jar" tofile="${app.dir}/libs/konysqlcipher.jar" overwrite="true"/>
				<if>
					<equals arg1="${supportx86}" arg2="true"/>
					<then>
						<!--Copy FIPS SQL x86 libs-->
						<copydir src="${extlibs}/SQLCIPHER_FIPS/libs/x86" dest="${app.dir}/libs/x86"/>	
						<!--Copy SSL and Crypto x86 libs to asssets-->
						<copydir src="${extlibs}/CryptoLib/x86" dest="${app.dir}/assets"/>	
					</then>
				</if>
			</then>
		</if>
		<if>
			<equals arg1="${UseOpenSSLLibrary}" arg2="true"/>
			<then>
				<if>
					<equals arg1="${bundle64bitlibs}" arg2="true"/>
					<then>
						<copy file="${extlibs}/CryptoWrapper/arm64-v8a/libcrypto_wrapper.so" tofile="${app.dir}/libs/arm64-v8a/libcrypto_wrapper.so" overwrite="true"/>
						<copydir src="${extlibs}/CryptoLib/arm64-v8a/"  dest="${app.dir}/assets" />
					</then>
					<else>
						<copy file="${extlibs}/CryptoWrapper/armeabi-v7a/libcrypto_wrapper.so" tofile="${app.dir}/libs/armeabi-v7a/libcrypto_wrapper.so" overwrite="true"/>
						<copydir src="${extlibs}/CryptoLib/armeabi-v7a/"  dest="${app.dir}/assets" />
					</else>
				</if>
				<if>
					<equals arg1="${supportx86}" arg2="true"/>
					<then>
						<!--Copy Cryptolib Wrapper-->
						<copy file="${extlibs}/CryptoWrapper/x86/libcrypto_wrapper.so" tofile="${app.dir}/libs/x86/libcrypto_wrapper.so" overwrite="true"/>
						<!--Copy SSL and Crypto x86 libs to asssets-->
						<copydir src="${extlibs}/CryptoLib/x86" dest="${app.dir}/assets"/>
					</then>
				</if>
			</then>
		</if>
		<if>
			<equals arg1="${platform.lib.metrics.thirdparty}" arg2="crittercism"/>
			<then>
				<copy todir="${app.dir}/libs">
					<fileset dir="${extlibs}/Crittercism/libs" includes="**/*.jar"/>
				</copy>
			</then>
		</if>
		<!--
			***************************************************************************************
										Copy JS Bindings Libraries
			****************************************************************************************
		-->
		<if>
			<and>
    		<not>
    			  <equals arg1="${androidssm}" arg2=""/>
    		</not>
			<not>
				  <equals arg1="${androidssm}" arg2="$${androidssm}"/>
    		</not>
			</and>
    		<then>
				<property name="enableJSBindings" value="true"/>
    		</then>
		</if>
		<if>
			<equals arg1="${usesvideo}" arg2="true"/>
    		<then>
				<property name="enableJSBindings" value="true"/>
    		</then>
		</if>
		<if>
			<or>
			<equals arg1="${enableMobileFirstAPIs}" arg2="true"/>
			<equals arg1="${enableJSBindings}" arg2="true"/>
			</or>
			<then>
				<copy file="${extlibs}/jsbindings.jar" tofile="${app.dir}/libs/jsbindings.jar" overwrite="true"/>
				<copy file="${extlibs}/commons-lang3-node-java.jar" tofile="${app.dir}/libs/commons-lang3-node-java.jar" overwrite="true"/>
				<copy file="${extlibs}/dexmaker-1.2.jar" tofile="${app.dir}/libs/dexmaker-1.2.jar" overwrite="true"/>
				<!--if>
					<equals arg1="${bundle64bitlibs}" arg2="true" />
					<then>
						<copy file="${extlibs}/arm64-v8a/libnativejsbindings.so" tofile="${app.dir}/libs/arm64-v8a/libnativejsbindings.so" overwrite="true"/>
					</then>
					<else>
						<copy file="${extlibs}/armeabi-v7a/libnativejsbindings.so" tofile="${app.dir}/libs/armeabi-v7a/libnativejsbindings.so" overwrite="true"/>
					</else>
				</if>
				<if>
					<equals arg1="${supportx86}" arg2="true"/>
					<then>
						<if>
							<equals arg1="${bundlex8664bitlibs}" arg2="true" />
							<then>
								<copy file="${extlibs}/x86_64/libnativejsbindings.so" tofile="${app.dir}/libs/x86_64/libnativejsbindings.so" overwrite="true"/>
							</then>
							<else>
								<copy file="${extlibs}/x86/libnativejsbindings.so" tofile="${app.dir}/libs/x86/libnativejsbindings.so" overwrite="true"/>
							</else>
						</if>
					</then>
				</if-->
			</then>
		</if>
    </target>

	<target name="add-googleplayservices-gradle-dependencies">
		<echo message="libtype = ${libtype}" />
		<if>
    		<equals arg1="${libtype}" arg2="map"/>
    		<then>
				<replace file="${app.dir}/build.gradle" token="$COMPILE_GOOGLE_PLAY_MAPS" value="${maplibversion}"/>			
    		</then>
    	<else>
    		<if>
    		<equals arg1="${libtype}" arg2="location"/>
    			<then>
    				<replace file="${app.dir}/build.gradle" token="$COMPILE_GOOGLE_PLAY_LOCATION" value="${locationlibversion}"/>
    			</then>
    		</if>
    	</else>
    	</if>
	</target>
	
	<target name="getFolderName">
		<basename property="foldername" file="${line}"/>
		<echo message="foldername = ${foldername}"/>
		<var name="folder" value="${foldername}"/>
	</target>

	<target name="renameiconpng">
		<taskdef name="ConvertStringToLowerCase" classname="ConvertStringToLowerCase">
			<classpath>
				<pathelement location="${extres}/ConvertStringToLowerCase.jar"/>
			</classpath>	
		</taskdef>

		<ConvertStringToLowerCase inputString="${appid}" property="ApplicationId"/>

		<if>
			<available file="${app.dir}/res/drawable/icon.png" />
			<then>
				<copy file="${app.dir}/res/drawable/icon.png" tofile="${app.dir}/res/drawable/${ApplicationId}_icon.png" overwrite="true"/>
			</then>	
		</if>
	</target>
	
    <target name="gen">
        <echo>Building android source code</echo>
		<if>
			<available file="${plugin.loc}/lib/KonyAntScript.jar"/>
			<then>
				<osfamily property="os.family"/>          
				<if>
					<equals arg1="${os.family}" arg2="windows"/>
					<then>
						<propertyregex property="andhome" input="${android.home}" regexp="\\" replace="//" defaultValue="${android.home}"/>
					</then>
					<else>
						<property name="andhome" value="${android.home}"/>
					</else>
				</if>
			</then>
			<else>
				 <propertyregex property="andhome" input="${android.home}" regexp="\\" replace="//"/>
			</else>
		</if>
    	<if>
    		   <equals arg1="${packagename}" arg2="$${packagename}"/>
    		<then>
    			<echo message="The value of packagename is empty" />
    			<property name="package" value="com.konylabs.${appid}"/>
    		</then>
    	<else>
    		<if>
    			<equals arg1="${packagename}" arg2="" />
    			<then>
    				<echo message="The value of packagename is empty" />
    				<property name="package" value="com.konylabs.${appid}"/>
    			</then>
    		<else>
    			<echo message="The value of packagename is ${packagename}" />
    			<property name="package" value="${packagename}"/>
    		</else>
    		</if>
    	</else>
    	</if>
        <propertyregex property="packagepath" input="${package}" regexp="\." replace="//"/> 
    	<!-- Creating source folder -->
    	<echo message="Creating package path: ${app.dir}/src/${packagepath}"/> 
    	<mkdir dir="${app.dir}/src/${packagepath}"/>
    	<move file="${app.dir}/src/APPID.java" tofile="${app.dir}/src/${packagepath}/${appid}.java" overwrite="true"/>
    	<replace file="${app.dir}/AndroidManifest.xml" token="$PACKAGE" value="${package}"/>
		<!--<replace file="${app.dir}/AndroidManifest.xml" token="$MINSDKVERSION" value="${andminsdkkey}"/> -->
    	<replace file="${app.dir}/AndroidManifest.xml" token="$VERSIONNAME" value="${appversion}"/>
		<replace file="${app.dir}/AndroidManifest.xml" token="$VERSIONCODE" value="${appversioncode}"/>
        <replace file="${app.dir}/src/${packagepath}/${appid}.java" token="$PACKAGE" value="${package}"/>
        <replace file="${app.dir}/src/${packagepath}/${appid}.java" token="$APPID" value="${appid}"/>
        <replace file="${app.dir}/build.xml" token="$APPID" value="${appid}"/>
        <replace file="${app.dir}/local.properties" token="$ANDROIDSDK" value="${andhome}"/>
		<if>
			<equals arg1="${isFPbuild}" arg2="true"/>
			<then>
			    <replace file="${app.dir}/res/values/strings.xml" token="$APPID" value="${appname} preview"/>
				<replace file="${app.dir}/src/${packagepath}/${appid}.java" token="$APP_SOURCE_LOC" value="1" />				
			</then>
			<else>
			    <replace file="${app.dir}/res/values/strings.xml" token="$APPID" value="${appname}"/>
			</else>
		</if>
		
		<!--
			***************************************************************************************
			INCLUDE GOOGLE PLAY SERVICES LIBRARY PROJECT IF 'usegoogleplaylocationservices" IS true
			****************************************************************************************
		-->
		
		<echo> usegoogleplaylocationservices: ${usegoogleplaylocationservices.local} </echo>
		<if>
    		<equals arg1= "${usegoogleplaylocationservices.local}" arg2= "true"/>
    		<then>
				<ant antfile="${currentfile}" target="add-googleplayservices-gradle-dependencies">
					<property name="libtype" value="location"/>
				</ant>				
			</then>
		</if>
		<ant antfile="${currentfile}" target="addGoogleMapEntries"/>
		
		<!--
			***********************************************************
			Replacing SEARCH BAR related entries in AndroidManifest.xml
			***********************************************************	
		-->
		<if>
    		<equals arg1= "${enablesearchbar.local}" arg2= "true"/>
    		<then>
			<move file="${app.dir}/src/PROVIDER.java" tofile="${app.dir}/src/${packagepath}/${appid}SearchSuggestionProvider.java" overwrite="true"/>
			<replace file="${app.dir}/AndroidManifest.xml" token="$SEARCH_PROVIDER" 
				value="&lt;provider android:authorities=&quot;${package}.${appid}SuggestionProvider&quot;
								 android:name=&quot;${package}.${appid}SearchSuggestionProvider&quot; /&gt;"/>
			
			<replace file="${app.dir}/AndroidManifest.xml" token="$SEARCHABLE_META_DATA" 
				value="&lt;meta-data android:name=&quot;android.app.default_searchable&quot;
								  android:value=&quot;.KonyMain&quot; /&gt;"/>
			<replace file="${app.dir}/AndroidManifest.xml" token="$ACTION_SEARCH_INTENTFILTER" 
				value=" &lt;intent-filter&gt;
							&lt;action android:name=&quot;android.intent.action.SEARCH&quot; /&gt;
							&lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;
						&lt;/intent-filter&gt;"/>
			<replace file="${app.dir}/AndroidManifest.xml" token="$SEARCH_META_DATA" 
				value=" &lt;meta-data
							android:name=&quot;android.app.searchable&quot;
							android:resource=&quot;@xml/searchable&quot; /&gt;"/>				  

			<replace file="${app.dir}/src/${packagepath}/${appid}.java" token="$IMPORT_SEARCH_CLASSES" 	
						value="import com.konylabs.search.SearchDataAdapter;${line.separator}
						import android.provider.SearchRecentSuggestions;${line.separator}
						import android.content.Intent;${line.separator}
						import android.app.SearchManager;${line.separator}"/>
			<replace file="${app.dir}/src/${packagepath}/${appid}.java" token="$HANDLE_SEARCH_INTENT" 	
					 value="public void onNewIntent(Intent intent) {${line.separator}
						if (Intent.ACTION_SEARCH.equals(intent.getAction())) {${line.separator}
							// handles a search query${line.separator}
							String query = intent.getStringExtra(SearchManager.QUERY);${line.separator}
							String extraData = intent.getStringExtra(&quot;intent_extra_data_key&quot;);${line.separator}
							SearchRecentSuggestions suggestions = new SearchRecentSuggestions(this,${line.separator}
									${appid}SearchSuggestionProvider.AUTHORITY, ${appid}SearchSuggestionProvider.MODE);${line.separator}
							suggestions.saveRecentQuery(query, extraData);${line.separator}
							SearchDataAdapter.getInstance().raiseOnDoneCallback(query,extraData);${line.separator}
						}${line.separator}
						else${line.separator}
							super.onNewIntent(intent);${line.separator}
					}${line.separator}"/>
			<replace file="${app.dir}/src/${packagepath}/${appid}SearchSuggestionProvider.java" token="$PACKAGE" value="${package}"/>
			<replace file="${app.dir}/src/${packagepath}/${appid}SearchSuggestionProvider.java" token="$AUTHORITY" value="${package}.${appid}SuggestionProvider"/>
			<replace file="${app.dir}/src/${packagepath}/${appid}SearchSuggestionProvider.java" token="$PROVIDER" value="${appid}SearchSuggestionProvider"/>
			<replace file="${app.dir}/res/xml/searchable.xml" token="$AUTHORITY" value="${package}.${appid}SuggestionProvider"/>
			<replace file="${app.dir}/res/values/strings.xml" token="$SEARCH_HINT" value="&lt;string name=&quot;search_hint&quot;&gt;Search&lt;/string&gt;"/>
			<replace file="${app.dir}/res/values/strings.xml" token="$SEARCH_LABEL" value="&lt;string name=&quot;search_label&quot;&gt;Search&lt;/string&gt;"/>
		</then>
			<else>
				<delete file="${app.dir}/src/PROVIDER.java"/>
				<delete file="${app.dir}/res/xml/searchable.xml"/>
				<replace file="${app.dir}/res/values/strings.xml" token="$SEARCH_HINT" value=""/>
				<replace file="${app.dir}/res/values/strings.xml" token="$SEARCH_LABEL" value=""/>
				<replace file="${app.dir}/src/${packagepath}/${appid}.java" token="$IMPORT_SEARCH_CLASSES" value=""/>
				<replace file="${app.dir}/src/${packagepath}/${appid}.java" token="$HANDLE_SEARCH_INTENT" value=""/>
				<replace file="${app.dir}/AndroidManifest.xml" token="$SEARCH_PROVIDER" value=""/>			
				<replace file="${app.dir}/AndroidManifest.xml" token="$SEARCHABLE_META_DATA" value=""/>
				<replace file="${app.dir}/AndroidManifest.xml" token="$ACTION_SEARCH_INTENTFILTER" value=""/>
				<replace file="${app.dir}/AndroidManifest.xml" token="$SEARCH_META_DATA" value=""/>	
			</else>
    	</if>
		
		<!-- 
			*************************************************************************************************
				Replacing $MANIFEST_CHILD_TAGS and $APPLICATION_CHILD_TAGS in AndroidManifest.xml
			*************************************************************************************************		
		-->
		
    	<if>
    		   <equals arg1="${andmanifesttags}" arg2="$${andmanifesttags}"/>
    		<then>
    			<echo message="No child tags defined for manifest tag" />
    			<property name="manifest_child_tags" value=""/>
    		</then>
			<else>
				<echo message="The value of andmanifesttags is ${andmanifesttags}" />
				<property name="manifest_child_tags" value="${andmanifesttags}"/>
			</else>
    	</if>
     	<if>
    		   <equals arg1="${andapplicationtags}" arg2="$${andapplicationtags}"/>
    		<then>
    			<echo message="No child tags defined for application tag" />
    			<property name="application_child_tags" value=""/>
    		</then>
			<else>
				<echo message="The value of andapplicationtags is ${andapplicationtags}" />
				<property name="application_child_tags" value="${andapplicationtags}"/>
			</else>
    	</if>
		<replace file="${app.dir}/AndroidManifest.xml" 
						token="$MANIFEST_CHILD_TAGS" 
						value="${manifest_child_tags}" 
						/>
		<replace file="${app.dir}/AndroidManifest.xml" 
						token="$APPLICATION_CHILD_TAGS" 
						value="${application_child_tags}"
						/> 
    		<if>
    		   <equals arg1="${activity_child_tags}" arg2="$${activity_child_tags}"/>
    		<then>
    			<echo message="No child tags defined for activity tag" />
    			<property name="activitychildtags" value=""/>
    		</then>
			<else>
				<echo message="The value of activity_child_tags is ${activity_child_tags}" />
				<property name="activitychildtags" value="${activity_child_tags}"/>
			</else>
    		</if>
		<replace file="${app.dir}/AndroidManifest.xml" 
						token="$MAIN_ACTIVITY_CHILD_TAGS" 
						value="${activitychildtags}" 
						/>	
		<echo message="The value of andapplicationattrs is ${andapplicationattrs}" />
		<echo message="The value of ismipmapicon is ${ismipmapicon}" />
		<var name="application_attrs" value="${andapplicationattrs}"/>
		<if>
			<not>
				<contains string="${application_attrs}" substring="android:icon"/>
			</not>
			<then>
				<if>
					<equals arg1= "${ismipmapicon}" arg2= "true"/>
					<then>
						<echo>Setting mipmap icon: ${logo}</echo>
						<propertyregex property="logo.iconname" input="${logo}" regexp="[.][A-Za-z]*$" replace="" global="true" />
						<var name="application_attrs" value="android:icon=&quot;@mipmap/${logo.iconname}&quot; ${application_attrs}"/>
					</then>
					<else>
						<echo>Setting drawable icon: ${logo}</echo>
						<var name="application_attrs" value="android:icon=&quot;@drawable/${ApplicationId}_icon&quot; ${application_attrs}"/>
					</else>
				</if>
			</then>
		</if>
		<if>
			<not>
				<contains string="${application_attrs}" substring="android:label"/>
			</not>
			<then>
				<var name="application_attrs" value="android:label=&quot;@string/app_name&quot; ${application_attrs}"/>
			</then>
		</if>
		<if>
			<not>
				<contains string="${application_attrs}" substring="android:name"/>
			</not>
			<then>
				<var name="application_attrs" value="android:name=&quot;com.konylabs.android.KonyApplication&quot; ${application_attrs}"/>
			</then>
		</if>
		<if>
			<not>
				<contains string="${application_attrs}" substring="tools:replace=&quot;"/>
			</not>
			<then>
				<var name="application_attrs" value="tools:replace=&quot;icon&quot; ${application_attrs}"/>
			</then>
			<else>
				<propertyregex property="application_attrs_temp" input=" ${application_attrs}" regexp="tools:replace=&quot;" replace="tools:replace=&quot;icon," casesensitive="false" />
				<var name="application_attrs" value="${application_attrs_temp}"/> 
			</else>
		</if>
		
		<if>
			<not>
				<contains string="${application_attrs}" substring="tools:remove=&quot;"/>
			</not>
			<then>
				<var name="application_attrs" value="tools:remove=&quot;supportsRtl&quot; ${application_attrs}"/>
			</then>
			<else>
				<propertyregex property="application_attrs_temp1" input=" ${application_attrs}" regexp="tools:remove=&quot;" replace="tools:remove=&quot;supportsRtl," casesensitive="false" />
				<var name="application_attrs" value="${application_attrs_temp1}"/> 
			</else>
		</if>
			
		<replace file="${app.dir}/AndroidManifest.xml" 
						token="$APPLICATION_ATTRS" 
						value="${application_attrs}" 
						/>
		<!--  Copying manifest attributes  -->
		<if>
    	   <equals arg1="${manifest_tag_attrs}" arg2="$${manifest_tag_attrs}"/>
    		<then>
    			<echo message="No attributes defined for manifest tag" />
    			<property name="manifesttagattrs" value=""/>
    		</then>
			<else>
				<echo message="The value of manifest_tag_attrs is ${manifest_tag_attrs}" />
				<property name="manifesttagattrs" value="${manifest_tag_attrs}"/>
			</else>
    	</if>
		<replace file="${app.dir}/AndroidManifest.xml" 
						token="$MANIFEST_TAG_ATTRS" 
						value="${manifesttagattrs}" 
						/>
		<!--  Copying activity attributes  -->	
		<echo message="The value of activityattrs is ${activityattrs}" />
		<if>
		<equals arg1="${activityattrs}" arg2="$${activityattrs}"/>
    		<then>
    			<var name="activity_attrs" value=""/>
    		</then>
		<else>
    			<var name="activity_attrs" value="${activityattrs}"/>
		</else>
		</if>
		<if>
			<not>
				<contains string="${activity_attrs}" substring="android:windowSoftInputMode"/>
			</not>
			<then>
				<var name="activity_attrs" value="android:windowSoftInputMode=&quot;adjustResize&quot; ${activity_attrs}"/>
			</then>
		</if>
		<if>
			<not>
				<contains string="${activity_attrs}" substring="android:screenOrientation"/>
			</not>
			<then>
				<var name="activity_attrs" value="android:screenOrientation=&quot;sensor&quot; ${activity_attrs}"/>
			</then>
		</if>
		<if>
			<not>
				<contains string="${activity_attrs}" substring="android:configChanges"/>
			</not>
			<then>
				<var name="activity_attrs" value="android:configChanges=&quot;locale|keyboardHidden|orientation|screenSize|screenLayout&quot; ${activity_attrs}"/>
			</then>
		</if>
		<if>
			<not>
				<contains string="${activity_attrs}" substring="android:launchMode"/>
			</not>
			<then>
				<var name="activity_attrs" value="android:launchMode=&quot;singleTask&quot; ${activity_attrs}"/>
			</then>
		</if>
		<if>
			<not>
				<contains string="${activity_attrs}" substring="android:label"/>
			</not>
			<then>
				<var name="activity_attrs" value="android:label=&quot;@string/app_name&quot; ${activity_attrs}"/>
			</then>
		</if>
		<if>
			<not>
				<contains string="${activity_attrs}" substring="android:name"/>
			</not>
			<then>
				<var name="activity_attrs" value="android:name=&quot;.${appid}&quot; ${activity_attrs}"/>
			</then>
		</if>
        <if>
			<not>
				<contains string="${activity_attrs}" substring="android:theme"/>
			</not>
			<then>
                <if>            
                    <equals arg1="${isWatchBuild.Local}" arg2="true"/>               
                    <then>
                        <var name="activity_attrs" value="android:theme=&quot;@style/WatchNoActionBarTheme&quot; ${activity_attrs}"/>
                    </then>
                     <else>
                         <var name="activity_attrs" value="android:theme=&quot;@style/Theme.AppCompat.NoActionBar&quot; ${activity_attrs}"/>
                     </else>
                </if>
              </then>       
        </if> 
        <replace file="${app.dir}/AndroidManifest.xml" 
						token="$ACTIVITY_ATTRS" 
						value="${activity_attrs}" 
						/>		
		<!-- 
			*****************************************************
				Replacing $SDK_VERSIONS in AndroidManifest.xml
			*****************************************************	
		-->
		<if>
			<equals arg1= "${andminsdkkey}" arg2= "None"/>
			<then> 
			<property name="minsdkversion" value=""/>
			</then>
			<else>
			<property name="minsdkversion" value="android:minSdkVersion =&quot;${andminsdkkey}&quot;"/>
			</else>
		</if>
		<if>
			<equals arg1= "${andtargetsdkkey}" arg2= "None"/>
			<then> 
			<property name="targetsdkversion" value="android:targetSdkVersion=&quot;7&quot;"/>
			</then>
			<else>
			<property name="targetsdkversion" value="android:targetSdkVersion=&quot;${andtargetsdkkey}&quot;"/>
			</else>
		</if>
		<if>
			<equals arg1= "${andmaxsdkkey}" arg2= "None"/>
			<then> 
			<property name="maxsdkversion" value=""/>
			</then>
			<else>
			<property name="maxsdkversion" value="android:maxSdkVersion =&quot;${andmaxsdkkey}&quot;"/>
			</else>
		</if>
		<property name="usessdk" value="${maxsdkversion} ${targetsdkversion} ${minsdkversion}"/>
		<echo>Min SDK version: ${minsdkversion} </echo>
		<echo>Max SDK version: ${maxsdkversion} </echo>
		<echo>Target SDK version: ${targetsdkversion} </echo>
		<replace file="${app.dir}/AndroidManifest.xml" token="$SDK_VERSIONS" value="&lt;uses-sdk ${usessdk}/&gt;" />
		<!--
			*************************************************************************************************************************************
				Replacing $PUSH_NOTIFICATION_PERMISSIONS, $PUSH_NOTIFICATION_INTENTFILTER, $PUSH_NOTIFICATION_RECEIVER in AndroidManifest.xml.
			*************************************************************************************************************************************	
		-->
		
			
		<echo>enablepushnotifications ${enablepushnotifications}</echo>
      <echo>enablefcmpushnotifications ${enablefcmpushnotifications}</echo>
      <echo>customgcmbroadcastreceiver ${customgcmbroadcastreceiver}</echo>
      <echo>customfcmservice ${customfcmservice}</echo>
      <echo>FCM GCM</echo>
      <if>
         <equals arg1="${enablepushnotifications}" arg2="true" />
         <then>
            <if>
               <not>
                  <equals arg1="${customgcmbroadcastreceiver}" arg2="$${customgcmbroadcastreceiver}" />
               </not>
               <then>
                  <condition property="customgcmbroadcastreceiver.flag">
                     <and>
                        <length string="${customgcmbroadcastreceiver}" trim="true" when="greater" length="0" />
                     </and>
                  </condition>
                  <if>
                     <equals arg1="${customgcmbroadcastreceiver.flag}" arg2="true" />
                     <then>
                        <property name="customgcmbroadcastreceiver.local" value="${customgcmbroadcastreceiver}" />
                     </then>
                     <else>
                        <property name="customgcmbroadcastreceiver.local" value="com.konylabs.gcm.KonyGCMBroadcastReceiver" />
                     </else>
                  </if>
               </then>
               <else>
                  <property name="customgcmbroadcastreceiver.local" value="com.konylabs.gcm.KonyGCMBroadcastReceiver" />
               </else>
            </if>
            <property name="push_notification_permissions" value="&lt;permission android:name=&quot;${package}.permission.C2D_MESSAGE&quot; android:protectionLevel=&quot;signature&quot;/&gt;${line.separator}      &lt;uses-permission android:name=&quot;${package}.permission.C2D_MESSAGE&quot;/&gt;${line.separator}      &lt;uses-permission android:name=&quot;com.google.android.c2dm.permission.RECEIVE&quot;/&gt;${line.separator}      &lt;uses-permission android:name=&quot;android.permission.VIBRATE&quot;/&gt;" />
            <property name="push_notification_intent_filter" value="&lt;intent-filter&gt;${line.separator}&lt;action android:name=&quot;${package}.GCM_MSG_VIEW&quot;/&gt;${line.separator}         &lt;action android:name=&quot;${package}.GCM_REGID_VIEW&quot;/&gt;${line.separator}           &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;${line.separator}&lt;/intent-filter&gt;" />
            <property name="push_notification_receiver" value="&lt;receiver android:name=&quot;${customgcmbroadcastreceiver.local}&quot; android:permission=&quot;com.google.android.c2dm.permission.SEND&quot;&gt;${line.separator}           &lt;intent-filter&gt;${line.separator}&lt;action android:name=&quot;com.google.android.c2dm.intent.RECEIVE&quot; /&gt;${line.separator}&lt;category android:name=&quot;${package}&quot; /&gt;${line.separator}           &lt;/intent-filter&gt;${line.separator}&lt;intent-filter&gt;${line.separator}&lt;action android:name=&quot;com.google.android.c2dm.intent.REGISTRATION&quot; /&gt;${line.separator}&lt;category android:name=&quot;${package}&quot; /&gt;${line.separator}           &lt;/intent-filter&gt;${line.separator}&lt;/receiver&gt;" />
            <property name="kony_local_service" value="&lt;service android:name=&quot;com.konylabs.api.service.KonyLocalService&quot;${line.separator}                                      android:enabled=&quot;true&quot;${line.separator}                                      android:exported=&quot;false&quot;&gt;${line.separator}                                       &lt;/service&gt;" />
            <property name="fcm_instance_id_service" value="" />
            <property name="fcm_service" value="" />
            <property name="google_fcm_dependency" value="" />
            <property name="classpath_google_services.local" value="" />
            <property name="apply_plugin_google_services.local" value="" />
            <property name="push_notification_type.local" value="1" />
         </then>
         <elseif>
            <equals arg1="${enablefcmpushnotifications}" arg2="true" />
            <then>
               <if>
                  <not>
                     <equals arg1="${customfcmservice}" arg2="$${customfcmservice}" />
                  </not>
                  <then>
                     <condition property="customfcmservice.flag">
                        <and>
                           <length string="${customfcmservice}" trim="true" when="greater" length="0" />
                        </and>
                     </condition>
                     <if>
                        <equals arg1="${customfcmservice.flag}" arg2="true" />
                        <then>
                           <property name="customfcmservice.local" value="${customfcmservice}" />
                        </then>
                        <else>
                           <property name="customfcmservice.local" value="com.konylabs.fcm.KonyFCMService" />
                        </else>
                     </if>
                  </then>
                  <else>
                     <property name="customfcmservice.local" value="com.konylabs.fcm.KonyFCMService" />
                  </else>
               </if>
               <property name="push_notification_permissions" value="" />
               <property name="push_notification_intent_filter" value="&lt;intent-filter&gt;${line.separator}&lt;action android:name=&quot;${package}.GCM_MSG_VIEW&quot;/&gt;${line.separator}                   &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;${line.separator}&lt;/intent-filter&gt;" />
               <property name="push_notification_receiver" value="" />
               <property name="kony_local_service" value="" />
               <property name="fcm_instance_id_service" value="&lt;service android:name=&quot;com.konylabs.fcm.KonyFCMInstanceIdService&quot;&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;com.google.firebase.INSTANCE_ID_EVENT&quot;/&gt; &lt;/intent-filter&gt; &lt;/service&gt;" />
               <property name="fcm_service" value="&lt;service android:name=&quot;${customfcmservice.local}&quot;&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;com.google.firebase.MESSAGING_EVENT&quot;/&gt; &lt;/intent-filter&gt; &lt;/service&gt;" />
               <property name="google_fcm_dependency" value="${dependencies_google_fcm_messaging}" />
               <property name="classpath_google_services.local" value="${classpath_google_services}" />
               <property name="apply_plugin_google_services.local" value="${apply_plugin_google_services}" />
               <property name="push_notification_type.local" value="2" />
               <if>
                  <available file="${resfolder}/${resources.platform.folder}/fcm/google-services.json" />
                  <then>
                     <copy file="${resfolder}/${resources.platform.folder}/fcm/google-services.json" tofile="${app.dir}/google-services.json" overwrite="true" />
                  </then>
               </if>
            </then>
         </elseif>
         <else>
            <property name="push_notification_permissions" value="" />
            <property name="push_notification_intent_filter" value="" />
            <property name="push_notification_receiver" value="" />
            <property name="kony_local_service" value="" />
            <property name="fcm_instance_id_service" value="" />
            <property name="fcm_service" value="" />
            <property name="google_fcm_dependency" value="" />
            <property name="classpath_google_services.local" value="" />
            <property name="apply_plugin_google_services.local" value="" />
            <property name="push_notification_type.local" value="0" />
         </else>
      </if>
      <echo>Push Notification Permissions: ${push_notification_permissions}</echo>
      <echo>Push Notification Intent Filters: ${push_notification_intent_filter}</echo>
      <echo>Push Notification Intent Receiver: ${push_notification_receiver}</echo>
      <echo>Kony Local Service: ${kony_local_service}</echo>
      <replace file="${app.dir}/AndroidManifest.xml" token="$PUSH_NOTIFICATION_PERMISSIONS" value="${push_notification_permissions}" />
      <replace file="${app.dir}/AndroidManifest.xml" token="$PUSH_NOTIFICATION_INTENTFILTER" value="${push_notification_intent_filter}" />
      <replace file="${app.dir}/AndroidManifest.xml" token="$PUSH_NOTIFICATION_RECEIVER" value="${push_notification_receiver}" />
      <replace file="${app.dir}/AndroidManifest.xml" token="$KONY_LOCAL_SERVICE" value="${kony_local_service}" />
      <replace file="${app.dir}/AndroidManifest.xml" token="$FCM_INSTANCE_ID_SERVICE" value="${fcm_instance_id_service}" />
      <replace file="${app.dir}/AndroidManifest.xml" token="$FCM_SERVICE" value="${fcm_service}" />
      <replace file="${app.dir}/build.gradle" token="$COMPILE_ANDROID_FCM_DEPENDENCIES" value="${google_fcm_dependency}" />
      <replace file="${app.dir}/build.gradle" token="$CLASSPATH_GOOGLE_SERVICES" value="${classpath_google_services.local}" />
      <replace file="${app.dir}/build.gradle" token="$GOOGLE_SERVICES_PLUGIN" value="${apply_plugin_google_services.local}" />
      <echo>push_notification_type.local ${push_notification_type.local}</echo>
   

           
           <!--
			*************************************************************************************************************************************
				Replacing WEAR_BACKGROUND_LISTENER_SERVICE in AndroidManifest.xml.
			*************************************************************************************************************************************	
		-->           
        <!-- add watchBackgroundServiceListener if developer does not give "com.konylabs.api.wearable.KonyWearableListenerService" string in
        application attributes -->
        <if>
            <not>
                <contains string="${andapplicationtags}" substring="com.konylabs.api.wearable.KonyWearableListenerService"/>
            </not>			
            <then>
                <echo>application childtags does not contain  com.konylabs.api.wearable.KonyWearableListenerService</echo>
                <if>
                    <or>
                        <equals arg1="${addWatchBackgroundListenerToReceiveMessagePayload}" arg2="true"/>  
                        <equals arg1="${addWatchBackgroundListenerToReceiveDataPayload}" arg2="true"/>       
                    </or>
                    <then>
                        <property name = "watch_background_listener_service_start_tag"
                             value = "&lt;service android:name=&quot;com.konylabs.api.wearable.KonyWearableListenerService&quot;&gt; ${line.separator}"
                                     />
                        <if>
                            <equals arg1="${addWatchBackgroundListenerToReceiveMessagePayload}" arg2="true"/>  
                            <then>
                                <property name = "addMessageReceiver_IntentFilter"
                             value = "&lt;intent-filter&gt;${line.separator}
                                     &lt;action android:name=&quot;com.google.android.gms.wearable.MESSAGE_RECEIVED&quot; /&gt;${line.separator}
                                     &lt;data android:scheme=&quot;wear&quot;  android:host=&quot;*&quot; /&gt;${line.separator}
                                     &lt;/intent-filter&gt; ${line.separator}"  />

                            </then>
                            <else>
                                <property name = "addMessageReceiver_IntentFilter" value ="" />
                            </else>
                        </if>
                        <if>
                            <equals arg1="${addWatchBackgroundListenerToReceiveDataPayload}" arg2="true"/>  
                            <then>
                                <property name = "addDataReceiver_IntentFilter"
                             value = "&lt;intent-filter&gt;${line.separator}
                                     &lt;action android:name=&quot;com.google.android.gms.wearable.DATA_CHANGED&quot; /&gt;${line.separator}
                                     &lt;data android:scheme=&quot;wear&quot;  android:host=&quot;*&quot; /&gt;${line.separator}
                                     &lt;/intent-filter&gt; ${line.separator}"  />

                            </then>
                            <else>
                                <property name = "addDataReceiver_IntentFilter" value ="" />
                            </else>
                        </if>                          
                        <property name = "watch_background_listener_service_end_tag"
                             value = "&lt;/service &gt;" />

                        <property  name = "watch_background_listener_service"
                   value = "${watch_background_listener_service_start_tag}${addMessageReceiver_IntentFilter}${addDataReceiver_IntentFilter} ${watch_background_listener_service_end_tag} " />             

                    </then>
                    <else>
                        <property  name = "watch_background_listener_service" value = ""/>
                    </else>
                </if>                           
            </then>
            <else>
                <property  name = "watch_background_listener_service" value = ""/>
            </else>
        </if> 
        <echo>watch_background_listener_service = ${watch_background_listener_service}</echo>
        
           <replace file="${app.dir}/AndroidManifest.xml" 
               token=" $WEAR_BACKGROUND_LISTENER_SERVICE" 
			   value="${watch_background_listener_service}" 
               />        
						
		<!--
			*************************************************************************************************************************************
				Replacing $DEEPLINK_INTENTFILTER in AndroidManifest.xml.
			*************************************************************************************************************************************	
		-->
		<if>
			<not>
			<equals arg1="${deeplinkscheme}" arg2="$${deeplinkscheme}"/>
			</not>
			<then>
				<echo file="deeplinkdata.txt" append="true"> &lt;intent-filter&gt;${line.separator}</echo>
				<echo file="deeplinkdata.txt" append="true"> &lt;action android:name=&quot;android.intent.action.VIEW&quot; /&gt;${line.separator}</echo>
				<echo file="deeplinkdata.txt" append="true"> &lt;category android:name=&quot;android.intent.category.BROWSABLE&quot;/&gt;${line.separator}</echo>
				<echo file="deeplinkdata.txt" append="true"> &lt;category android:name=&quot;android.intent.category.DEFAULT&quot;/&gt;${line.separator}</echo>
				<for list="${deeplinkscheme}" delimiter="," param = "val">
					<sequential>
						<echo> Adding scheme: @{val}</echo>
						<echo file="deeplinkdata.txt" append="true"> &lt;data android:scheme=&quot;@{val}&quot; /&gt;${line.separator}</echo>
					</sequential>
				</for>
				<if>
					<not>
						<equals arg1="${deeplinkhost}" arg2="$${deeplinkhost}"/>
					</not>
					<then>
						<for list="${deeplinkhost}" delimiter="," param = "val">
							<sequential>
								<echo> Adding host: @{val}</echo>
								<echo file="deeplinkdata.txt" append="true"> &lt;data android:host=&quot;@{val}&quot; /&gt;${line.separator}</echo>
							</sequential>
						</for>
					</then>
				</if>
				<if>
					<not>
						<equals arg1="${deeplinkport}" arg2="$${deeplinkport}"/>
					</not>
					<then>
						<for list="${deeplinkport}" delimiter="," param = "val">
							<sequential>
								<echo> Adding port: @{val}</echo>
								<echo file="deeplinkdata.txt" append="true"> &lt;data android:port=&quot;@{val}&quot; /&gt;${line.separator}</echo>
							</sequential>
						</for>
					</then>
				</if>				
				<if>
					<not>
						<equals arg1="${deeplinkpath}" arg2="$${deeplinkpath}"/>
					</not>
					<then>
						<for list="${deeplinkpath}" delimiter="," param = "val">
							<sequential>
								<echo> Adding path: @{val}</echo>
								<echo file="deeplinkdata.txt" append="true"> &lt;data android:path=&quot;@{val}&quot; /&gt;${line.separator}</echo>
							</sequential>
						</for>
					</then>
				</if>
				<if>
					<not>
						<equals arg1="${deeplinkpathprefix}" arg2="$${deeplinkpathprefix}"/>
					</not>
					<then>
						<for list="${deeplinkpathprefix}" delimiter="," param = "val">
							<sequential>
								<echo> Adding path prefix: @{val}</echo>
								<echo file="deeplinkdata.txt" append="true"> &lt;data android:pathPrefix=&quot;@{val}&quot; /&gt;${line.separator}</echo>
							</sequential>
						</for>
					</then>
				</if>
				<if>
					<not>
						<equals arg1="${deeplinkpathpattern}" arg2="$${deeplinkpathpattern}"/>
					</not>
					<then>
						<for list="${deeplinkpathpattern}" delimiter="," param = "val">
							<sequential>
								<echo> Adding path pattern: @{val}</echo>
								<echo file="deeplinkdata.txt" append="true"> &lt;data android:pathPattern=&quot;@{val}&quot; /&gt;${line.separator}</echo>
							</sequential>
						</for>
					</then>
				</if>
				<echo file="deeplinkdata.txt" append="true"> &lt;/intent-filter&gt;${line.separator}</echo>	
				<loadfile property="deeplink.prop" srcFile="deeplinkdata.txt"/>
				<replace file="${app.dir}/AndroidManifest.xml" 
						token="$DEEPLINK_INTENTFILTER" 
						value="${deeplink.prop}" 
				/>
				<delete file="deeplinkdata.txt" />
			</then>
			<else>
				<replace file="${app.dir}/AndroidManifest.xml" 
						token="$DEEPLINK_INTENTFILTER" 
						value="" 
				/>
			</else>
		</if>
		<!--
			***********************************************************
				Replacing $SUPPORT_SCREENS in AndroidManifest.xml
			***********************************************************	
		-->
		<if>
			<equals arg1="${isWatchBuild.Local}" arg2="true"/>
			<then>
				<replace file="${app.dir}/AndroidManifest.xml" token="$SUPPORT_SCREENS" value=""/>
			</then>
			<else>
				<if>
					<equals arg1= "${androidscreenanydensity}" arg2= "false"/>
					<then>
							<property name="anydensity" value=""/>
					</then>
					<else>
							<property name="anydensity" value="android:anyDensity =&quot;${androidscreenanydensity}&quot;"/>
					</else>
				</if>
		
				<property name="smallscreens" value="android:smallScreens =&quot;${androidscreensmall}&quot;"/>
				<property name="normalscreens" value="android:normalScreens =&quot;${androidscreennormal}&quot;"/>
				<property name="largescreens" value="android:largeScreens =&quot;${androidscreenlarge}&quot;"/>
				<if>
					<not>
						<equals arg1="${androidscreenextralarge}" arg2="$${androidscreenextralarge}"/>
					</not>
					<then>
						<if>
							<equals arg1= "${androidscreenextralarge}" arg2= "true"/>
							<then>
									<property name="xlargescreens" value="android:xlargeScreens =&quot;true&quot;"/>
							</then>
							<else>
								<property name="xlargescreens" value="android:xlargeScreens =&quot;false&quot;"/>
							</else>						
						</if>
					</then>
				</if>
				<if>
					<equals arg1= "${androidscreenresizeable}" arg2= "false"/>
					<then>
							<property name="resizeable" value=""/>
					</then>
					<else>
							<property name="resizeable" value="android:resizeable =&quot;${androidscreenresizeable}&quot;"/>
					</else>
				</if>
				<echo>Any Density: ${anydensity}</echo>
				<echo>Small Screen: ${smallscreens} </echo>
				<echo>Normal Screen: ${normalscreens}</echo>
				<echo>Large Screen: ${largescreens} </echo>
				<echo>xLarge Screen: ${xlargescreens} </echo>
				<echo>Resizable: ${resizeable}</echo>
				<property name="screens" value="${anydensity} ${smallscreens} ${normalscreens} ${largescreens} ${xlargescreens} ${resizeable}"/>
				
				<replace file="${app.dir}/AndroidManifest.xml" token="$SUPPORT_SCREENS" value="&lt;supports-screens ${screens}/&gt;"/> 
			</else>
		</if>
		<if>
			<equals arg1= "${andtargetsdkkey}" arg2= "None"/>
			<then>
				<property name="buildtargetsdkversion" value="android-7"/>
			</then>
			<else>
				<property name="buildtargetsdkversion" value="android-${andtargetsdkkey}"/>
			</else>						
		</if>
		<if>
		<available file="${app.dir}/default.properties"/>
			<then>
		        <replace file="${app.dir}/default.properties" token="$ANDROIDAPI" value="${buildtargetsdkversion}"/>
			</then>
 		</if>
		<replace file="${app.dir}/project.properties" token="$ANDROIDAPI" value="${buildtargetsdkversion}"/>
		
		<!--
			***********************************************************
			Handling install location for auto or preferExternal
			***********************************************************	
		-->
		
		<if>
    		<equals arg1="${installlocation}" arg2="$${installlocation}"/>
    		<then>
				<echo>Install location not defined </echo>				
				<replace file="${app.dir}/AndroidManifest.xml" token="$INSTALLLOCATION" value=""/>
    		</then>
			<else>
				<echo>Install location value defined:${installlocation}</echo>				
				<replace file="${app.dir}/AndroidManifest.xml" token="$INSTALLLOCATION" value="android:installLocation=&quot;${installlocation}&quot;"/>
			</else>			
		</if>

		<!--
			***********************************************************
				Replacing $PERMISSIONS_ALL in AndroidManifest.xml
			***********************************************************	
		-->
		<var name="pstr" value=""/>
		<if>
				<not>
					<equals arg1="${androidmanifestpermissions}" arg2="$${androidmanifestpermissions}"/>
				</not>
				<then>
					<for list="${androidmanifestpermissions}" param="letter">
						<sequential>
							<var name="tperm" value="&lt;uses-permission android:name=&quot;android.permission.@{letter}&quot;/&gt;${line.separator}"/>
							<var name="pstr" value="${pstr} ${tperm}"/>
						</sequential>
					</for>
					<echo>Permissions set:</echo>
					<echo>${pstr}</echo>
					<replace file="${app.dir}/AndroidManifest.xml" token="$PERMISSIONS_ALL" value="${pstr}"/>
			</then>
		</if>

		<!--
			**********************************************************************************************************************
				Replacing $IMPORT_FUNCTION_CLASS, $IMPORT_GLOBALSINIT_CLASS, $OVERRIDE_STARTUPMETHOD in AndroidManifest.xml
			**********************************************************************************************************************	
		-->
		<if>
			<equals arg1="${nativecodegen}" arg2="true"/>
			<then>
				<property name="nativecode.pkg" value="com.konylabs.NativeCodeApp"/>
				<propertyregex property="nativecode.pkg.path" input="${nativecode.pkg}" regexp="\." replace="//"/>
				<mkdir dir="${app.dir}/src/${nativecode.pkg.path}"/>
				<copy todir="${app.dir}/src/${nativecode.pkg.path}" overwrite="true">
					<fileset dir="${android.nativedir}">
						<include name="*.java"/>
					</fileset>
				</copy>
				<replace file="${app.dir}/src/${packagepath}/${appid}.java" token="$IMPORT_FUNCTION_CLASS" value="import com.konylabs.vm.Function;" />
				<replace file="${app.dir}/src/${packagepath}/${appid}.java" token="$IMPORT_GLOBALSINIT_CLASS" value="import ${nativecode.pkg}.Globalsinit;" />
				<replace file="${app.dir}/src/${packagepath}/${appid}.java" token="$OVERRIDE_STARTUPMETHOD" value="
					//Donot remove this method. This method returns the startup method for Application. ${line.separator}
					public Function getStartupMethod(){${line.separator}
						return new Function(){${line.separator}

							public Object[] execute(Object[] arg0) throws Exception {${line.separator}
								Globalsinit.initializeApp(null);${line.separator}
								return null;${line.separator}
							}${line.separator}
			
						};${line.separator}
					}${line.separator}"/>
			</then>
			<else>
				<replace file="${app.dir}/src/${packagepath}/${appid}.java" token="$IMPORT_FUNCTION_CLASS" value="" />
				<replace file="${app.dir}/src/${packagepath}/${appid}.java" token="$OVERRIDE_STARTUPMETHOD" value="" />
				<replace file="${app.dir}/src/${packagepath}/${appid}.java" token="$IMPORT_GLOBALSINIT_CLASS" value="" />
			</else>
		</if>
		<if>
			<equals arg1= "${enablelocalnotifications}" arg2= "true"/>
			<then>
				
					<property name="localbroadcastreceiver.local" value="com.konylabs.notification.KonyLocalNotificationBroadcastReceiver"/>
					
					<property name="local_notification_permissions" 
					value="
					&lt;uses-permission android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot;/&gt;${line.separator}
					&lt;uses-permission android:name=&quot;android.permission.VIBRATE&quot;/&gt;"/>
					<property name="local_notification_intent_filter"
								value="&lt;intent-filter&gt;${line.separator}&lt;action android:name=&quot;${package}.LOCAL_MSG_VIEW&quot;/&gt;${line.separator}
										&lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;${line.separator}&lt;/intent-filter&gt;"/>
					
					<property name="local_notification_receiver"
								value="&lt;receiver android:name=&quot;${localbroadcastreceiver.local}&quot; &gt;${line.separator}
										&lt;intent-filter&gt;${line.separator}&lt;action android:name=&quot;${package}.localnotifications&quot; /&gt;${line.separator}&lt;category android:name=&quot;${package}&quot; /&gt;${line.separator}
										&lt;/intent-filter&gt;${line.separator}&lt;intent-filter&gt;${line.separator}&lt;action android:name=&quot;${package}.localnotificationclear&quot; /&gt;${line.separator}&lt;category android:name=&quot;${package}&quot; /&gt;${line.separator}
										&lt;/intent-filter&gt;${line.separator}&lt;intent-filter&gt;${line.separator}&lt;action android:name=&quot;android.intent.action.BOOT_COMPLETED&quot; /&gt;${line.separator}&lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;${line.separator}
										&lt;/intent-filter&gt;${line.separator}&lt;/receiver&gt;"/>
			</then>
			<else>
				<property name="local_notification_permissions" value=""/>
				<property name="local_notification_intent_filter" value=""/>
				<property name="local_notification_receiver" value=""/>
			</else>
		</if>
		<echo> LOCAL Notification Permissions: ${local_notification_permissions} </echo>
		<echo> LOCAL Notification Intent Filters: ${local_notification_intent_filter} </echo>
		<echo> LOCAL Notification Intent Receiver: ${local_notification_receiver} </echo>
		<replace file="${app.dir}/AndroidManifest.xml" 
						token="$LOCAL_NOTIFICATION_PERMISSIONS" 
						value="${local_notification_permissions}" 
						/>
		<replace file="${app.dir}/AndroidManifest.xml" 
						token="$LOCAL_NOTIFICATION_INTENTFILTER" 
						value="${local_notification_intent_filter}" 
						/>
		<replace file="${app.dir}/AndroidManifest.xml" 
						token="$LOCAL_NOTIFICATION_RECEIVER" 
						value="${local_notification_receiver}" 
						/>
		
        <!-- if WatchBuild, add  <uses-feature android:name="android.hardware.type.watch" /> -->
          <if>
            <equals arg1="${isWatchBuild.Local}" arg2="true"/>               
            <then>
            <replace file="${app.dir}/AndroidManifest.xml" 
               token="$USES_FEATURE_WATCH" 
			   value="&lt;uses-feature android:name=&quot;android.hardware.type.watch&quot;/&gt;" 
               />
            </then>
            <else>
            <replace file="${app.dir}/AndroidManifest.xml" 
                token="$USES_FEATURE_WATCH" 
			    value=""
                />
            </else>
        </if>   
        
		<!--COMPILE_SDK_VERSION -->

		<!--
		If user has selected a target SDK <=25 we hardcode the compileSdkVersion value to '25' because of appcompat dependecies.
		If user selects target SDK > 25 then that version will be set as compileSdkVersion.
		Note: User can still set Unsupported target/compile sdk versions using precompile,postcompile, prefix or suffix entries.
		-->
		
		<if>
			<bool>
				<isgreaterthan arg1= "${andtargetsdkkey}" arg2= "${android_compile_version}"/>
			</bool>		
			<then>
					<property name="compilesdkversion" value="compileSdkVersion 'android-${andtargetsdkkey}'"/>
			</then>
			<else>
					<property name="compilesdkversion" value="compileSdkVersion  'android-${android_compile_version}'"/>
			</else>						
		</if>		
		<replace file="${app.dir}/build.gradle" token="$COMPILE_SDK_VERSION" value="${compilesdkversion}"/>	
		<replace file="${app.dir}/build.gradle" token="$COMPILE_ANDROID_INTIAL_DEPENDENCIES" value="${dependencies}"/>
		<replace file="${app.dir}/build.gradle" token="$ANDROID_BUILD_TOOLS_VERSION" value="${build_tools_version}"/>
		<replace file="${app.dir}/gradle/wrapper/gradle-wrapper.properties" token="$GRADLEW_URL" value="${gradlew_url}"/>		
			                        
		<!--MULTIDEX_SDK_VERSION -->

		<if>
		<available file="${app.dir}/project.properties"/>
		<then>
			<loadproperties srcfile="${app.dir}/project.properties"/>
			<if>
				<equals arg1="${multidexenable}" arg2="true"/>
				<then>
				<replace file="${app.dir}/build.gradle" token="$MULTIDEX_ENABLE" value="multiDexEnabled true"/>
				<replace file="${app.dir}/build.gradle" token="$COMPILE_MULTIDEX_VERSION" value="${multidex_dependency}"/>		
				</then>
				<else>
				<replace file="${app.dir}/build.gradle" token="$MULTIDEX_ENABLE" value=""/>				
				<replace file="${app.dir}/build.gradle" token="$COMPILE_MULTIDEX_VERSION" value=""/>		
				</else>
			 </if>
		</then>
 		</if>	
		
     <!-- check whether the build type is Watch , if so, add corresponding gradle dependencies related to Wear APi's  -->     
        <if>
            <or>
            <equals arg1="${isWatchBuild.Local}" arg2="true"/>
            <equals arg1="${useWatchCommunicationApis}" arg2="true"/>
            <equals arg1="${addWatchBackgroundListenerToReceiveDataPayload}" arg2="true"/>
            <equals arg1="${addWatchBackgroundListenerToReceiveMessagePayload}" arg2="true"/>
            </or>            
            <then>
                 <property name="googlePlayWearableVersion" value="${dependencies_google_play_wearable_version}"/>              
                 <property name="androidSupportWearableVersion" value="${dependencies_android_support_wearable_version}"/>
				 <property name="androidWearableWearableVersion" value="${dependencies_android_wearable_wearable_version}"/>
            </then>
            <else>
            <property name="googlePlayWearableVersion" value="" />
            <property name="androidSupportWearableVersion" value="" />
			<property name="androidWearableWearableVersion" value=""/>
            </else>
        </if>  
        <replace file="${app.dir}/build.gradle" token="$COMPILE_GOOGLE_PLAY_WEARABLE" value="${googlePlayWearableVersion}"/>
        <replace file="${app.dir}/build.gradle" token="$COMPILE_ANDROID_SUPPORT_WEARABLE" value= "${androidSupportWearableVersion}"/>
		<replace file="${app.dir}/build.gradle" token="$COMPILE_ONLY_ANDROID_WEARABLE_WEARABLE" value= "${androidWearableWearableVersion}"/>

		<!-- Google Pay Configuration in gradle and Manifest file-->
		<echo>Google-Pay  :: ${KonyPay}</echo>
		<if>
            <equals arg1="${KonyPay}" arg2="true"/>
            <then>
                 <property name="googlePlayPayVersion" value="${dependencies_google_play_pay_version}"/> 
				 <property name="googlePlayPayMetaData" value="&lt;meta-data android:name=&quot;com.google.android.gms.wallet.api.enabled&quot;
								  android:value=&quot;true&quot; /&gt;"/>              
            </then>
            <else>
                 <property name="googlePlayPayVersion" value=""/>
				 <property name="googlePlayPayMetaData" value=""/>              
            </else>
        </if>
		<replace file="${app.dir}/build.gradle" token="$COMPILE_GOOGLE_PLAY_PAY" value= "${googlePlayPayVersion}"/>
		<replace file="${app.dir}/AndroidManifest.xml" token="$Google_Play_Pay_META_DATA" value= "${googlePlayPayMetaData}"/>
  		
		<!-- PROXY SETTINGS-->

		<var name="httpproxyhost" value=""/>
		<var name="httpproxyport" value=""/>
		<var name="httpproxyuname" value=""/>
		<var name="httpproxypwd" value=""/>
		<var name="httpsproxyhost" value=""/>
		<var name="httpsproxyport" value=""/>
		<var name="httpsproxyuname" value=""/>
		<var name="httpsproxypwd" value=""/>	

		<if>
		<not>
		<equals arg1="${kony.http.proxyHost}" arg2="$${kony.http.proxyHost}" />
		</not>
		<then>
			<var name="httpproxyhost" value="systemProp.http.proxyHost=${kony.http.proxyHost}"/>					
			<var name="httpsproxyhost" value="systemProp.https.proxyHost=${kony.http.proxyHost}"/>					
			<if>
			<not>
			<equals arg1="${kony.http.proxyPort}" arg2="$${kony.http.proxyPort}" />
			</not>
			<then>
				<var name="httpproxyport" value="systemProp.http.proxyPort=${kony.http.proxyPort}"/>					
				<var name="httpsproxyport" value="systemProp.https.proxyPort=${kony.http.proxyPort}"/>	
			</then>
			</if>
			<if>
			<not>			
			<equals arg1="${kony.http.proxyUser}" arg2="$${kony.http.proxyUser}" />
			</not>			
			<then>
				<var name="httpproxyuname" value="systemProp.http.proxyUser=${kony.http.proxyUser}"/>					
				<var name="httpsproxyuname" value="systemProp.https.proxyUser=${kony.http.proxyUser}"/>	
			</then>
			</if>
			<if>
			<not>			
			<equals arg1="${kony.http.proxyPassword}" arg2="$${kony.http.proxyPassword}" />
			</not>			
			<then>
				<var name="httpproxypwd" value="systemProp.http.proxyPassword=${kony.http.proxyPassword}"/>					
				<var name="httpsproxypwd" value="systemProp.https.proxyPassword=${kony.http.proxyPassword}"/>				
			</then>
			</if>
		</then>
		</if>
		<if>
			<equals arg1="${killGradleDaemon}" arg2="false" />
			<then>
				<replace file="${app.dir}/gradle.properties" token="org.gradle.daemon" value="# org.gradle.daemon"/> 
				<concat fixlastline="yes" destfile="${app.dir}/gradle.properties" append="true">${line.separator}org.gradle.daemon=false${line.separator}</concat>
			</then>
		</if>
		<replace file="${app.dir}/gradle.properties" token="$HTTP_PROXY_HOST" value="${httpproxyhost}"/>	
		<replace file="${app.dir}/gradle.properties" token="$HTTP_PROXY_PORT" value="${httpproxyport}"/>		
		<replace file="${app.dir}/gradle.properties" token="$HTTP_PROXY_UNAME" value="${httpproxyuname}"/>		
		<replace file="${app.dir}/gradle.properties" token="$HTTP_PROXY_PWD" value="${httpproxypwd}"/>	
		<replace file="${app.dir}/gradle.properties" token="$HTTPS_PROXY_HOST" value="${httpsproxyhost}"/>	
		<replace file="${app.dir}/gradle.properties" token="$HTTPS_PROXY_PORT" value="${httpsproxyport}"/>		
		<replace file="${app.dir}/gradle.properties" token="$HTTPS_PROXY_UNAME" value="${httpsproxyuname}"/>		
		<replace file="${app.dir}/gradle.properties" token="$HTTPS_PROXY_PWD" value="${httpsproxypwd}"/>		
		
		<!-- ABI Filters-->	
		<var name="SUPPORTED_ARCHITECTURES" value="" />
		<if>
			<equals arg1="${bundle64bitlibs}" arg2="true" />
			<then>
				<var name="SUPPORTED_ARCHITECTURES" value="${SUPPORTED_ARCHITECTURES} 'arm64-v8a'" />
			</then>
			<else>
				<var name="SUPPORTED_ARCHITECTURES" value="${SUPPORTED_ARCHITECTURES} 'armeabi-v7a'" />
			</else>
		</if>
		<if>
			<equals arg1="${supportx86}" arg2="true"/>
			<then>
				<if>
					<equals arg1="${bundlex8664bitlibs}" arg2="true" />
					<then>
						<var name="SUPPORTED_ARCHITECTURES" value="${SUPPORTED_ARCHITECTURES}, 'x86_64'" />
					</then>
					<else>
						<var name="SUPPORTED_ARCHITECTURES" value="${SUPPORTED_ARCHITECTURES}, 'x86'" />
					</else>
				</if>
			</then>
		</if>
		<replace file="${app.dir}/build.gradle" token="$SUPPORTED_ARCHS" value="${SUPPORTED_ARCHITECTURES}" />
		
		
		<if>
		<not>			
		<equals arg1="${build_gradle_attrs_prefix}" arg2="$${build_gradle_attrs_prefix}" />
		</not>			
		<then>
			<echo>build_gradle_attrs_prefix = ${build_gradle_attrs_prefix}</echo>		
			<replace file="${app.dir}/build.gradle" token="$BUILD_GRADLE_PREFIX" value="${build_gradle_attrs_prefix}"/>			
		</then>
		<else>
			<replace file="${app.dir}/build.gradle" token="$BUILD_GRADLE_PREFIX" value=""/>
		</else>
		</if>	
		<if>
		<not>			
		<equals arg1="${build_gradle_attrs_suffix}" arg2="$${build_gradle_attrs_suffix}" />
		</not>			
		<then>
			<echo>build_gradle_attrs_suffix = ${build_gradle_attrs_suffix}</echo>		
			<concat fixlastline="yes" destfile="${app.dir}/build.gradle" append="true">${line.separator}${build_gradle_attrs_suffix}</concat>			
		</then>
		</if>
		<replace file="${app.dir}/build.gradle" token="$ANDROID_GRADLE_TOOLS_VERSION" value="${gradle_plugin_version}"/>	
		<if>
		<not>			
		<equals arg1="${gradle_properties_attrs}" arg2="$${gradle_properties_attrs}" />
		</not>			
		<then>
			<echo>gradle_properties_attrs = ${gradle_properties_attrs}</echo>		
			<concat fixlastline="yes" destfile="${app.dir}/gradle.properties" append="true">${line.separator}${gradle_properties_attrs}</concat>			
		</then>
		</if>
		<if>
		<not>			
		<equals arg1="${settings_gradle_attrs}" arg2="$${settings_gradle_attrs}" />
		</not>			
		<then>
			<echo>gradle_properties_attrs = ${settings_gradle_attrs}</echo>		
			<concat fixlastline="yes" destfile="${app.dir}/settings.gradle" append="true">${line.separator}${settings_gradle_attrs}</concat>			
		</then>
		</if>
		<if>
			<equals arg1="${isFPbuild}" arg2="true"/>
			<then>
				<concat fixlastline="yes" destfile="${app.dir}/settings.gradle" append="true">
					include ':CordovaAssetsLib'
					include ":CordovaAssetsLib:"
					include ":CordovaAssetsLib:CordovaLib"
				</concat>
			</then>
		</if>		
		<if>
			<equals arg1="${fileprovidersupport}" arg2="true" />
			<then>
				<copy file="${extres}/fileproviderpaths.xml" tofile="${app.dir}/res/xml/fileproviderpaths.xml" overwrite="true"/>
				<copy file="${extres}/fileproviderattr.xml" tofile="${app.dir}/res/values/fileproviderattr.xml" overwrite="true"/>
				<if>
					<equals arg1="${fileproviderpath}" arg2="$${fileproviderpath}" />
					<then>
						<replace file="${app.dir}/res/xml/fileproviderpaths.xml" token="$FILE_PROVIDER_PATH" value="/" />
						<replace file="${app.dir}/res/values/fileproviderattr.xml" token="$FILE_PROVIDER_PATH" value="" />
					</then>
					<else>
						<replace file="${app.dir}/res/xml/fileproviderpaths.xml" token="$FILE_PROVIDER_PATH" value="${fileproviderpath}" />
						<replace file="${app.dir}/res/values/fileproviderattr.xml" token="$FILE_PROVIDER_PATH" value="${fileproviderpath}" />
					</else>
				</if>
				<replace file="${app.dir}/AndroidManifest.xml" token="$LOCAL_FILE_PROVIDER"
						value="&lt;provider android:name=&quot;android.support.v4.content.FileProvider&quot;
									android:authorities=&quot;${package}&quot;
									android:exported=&quot;false&quot;
									android:grantUriPermissions=&quot;true&quot;&gt;
									&lt;meta-data
										android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot;
										android:resource=&quot;@xml/fileproviderpaths&quot; /&gt;
								&lt;/provider&gt;" />
			</then>
			<else>
				<replace file="${app.dir}/AndroidManifest.xml" token="$LOCAL_FILE_PROVIDER" value="" />
			</else>
		</if>
		<!--In case of Studio Functional Preview, Cordova Project is maintained as Library  -->
		<if>
			<equals arg1="${isFPbuild}" arg2="true"/>
			<then>			
				<replace file="${app.dir}/build.gradle" token="$COMPILE_CORDOVA_LIB" value="compile project(':CordovaAssetsLib')"/>
			</then>				
		</if>		
		<replace file="${app.dir}/res/values/pushconfig.xml" token="$PUSH_MESSAGE_ICON" value="${ApplicationId}_icon"/>
		<replace file="${app.dir}/res/values/pushconfig.xml" token="$PUSH_MESSAGE_NEW_REGISTRATION_ID_ICON" value="${ApplicationId}_icon"/>
		<replace file="${app.dir}/res/values/localnotificationconfig.xml" token="$LOCAL_NOTIFICATION_MSG_ICON" value="${ApplicationId}_icon"/>	
	</target>
	   
	<target name="addGoogleMapEntries">	
		<delete file="${app.dir}/res/layout/mapv2.xml"/>
				
		<!--
			******************************************************************************************
			set mapv2keyadded property to true, if MAPV2_KEY entry already exists in andapplicationtags of AndroidManifest.xml
				else false
			******************************************************************************************	
		-->		
		<condition property="mapv2keyadded" value="true" else="false">
		    <matches pattern="com.google.android.maps.v2.API_KEY" string="${andapplicationtags}"/>
		</condition>
		
		<!--
			******************************************************************************************
			set googlemapv2keyadded property to true, if user has given MAPV2_KEY in IDE MAP V2 Key Entry Option
				else false
			******************************************************************************************	
		-->
		<condition property="googlemapv2keyadded" value="false" else="true">
		<or>
			<equals arg1="${googlemapv2key}" arg2="$${googlemapv2key}"/>
			<equals arg1="${googlemapv2key}" arg2="" />
		</or>
		</condition>
		<if>
			<and>
				<equals arg1="${googlemapv2keyadded}" arg2="false"/>
				<equals arg1="${mapv2keyadded}" arg2="false" />
			</and>
			<then>
				<echo message="The value of googlemapv2key is empty" />
				<if>
					<equals arg1="${usesmaps}" arg2="true"/>
					<then>
						<!--
						When Map is dragged and dropped in IDE we get usesmaps true.
						If user didn't give any mapv2 key either in IDE MAP V2 Key Entry Option or through Manifest tag entries,
						we add Dummy Google Map V2 key such that app will not crash at runtime when Map is accessed.
						Note:
						Map will still crash if user adds map dynamically through code and don't add 
						Mapv2 key through any of IDE MAP V2 Key Entry Option or through Manifest tag entries.
						As we have no way to determine if Map is dynamically created and we can't add dummy key.						
						-->
						<var name="mapv2_key" value="&lt;meta-data android:name=&quot;com.google.android.maps.v2.API_KEY&quot; android:value=&quot;dummy_key&quot;/&gt;${line.separator}
						&lt;meta-data android:name=&quot;com.google.android.gms.version&quot; 
						android:value=&quot;@integer/google_play_services_version&quot;/&gt;"/>
					</then>
					<else>
						<!--Remove the place holders in AndroidManifest.xml -->
						<var name="mapv2_key" value=""/>
						<var name="mapv2_permissions" value=""/>
					</else>	
				</if>
			</then>
			<else>
				<if>
					<and>
						<equals arg1="${googlemapv2keyadded}" arg2="true"/>
						<equals arg1="${mapv2keyadded}" arg2="true" />
					</and>
					<then>
						<fail message="Duplicate maps.v2.API_KEY found in Android Manifest application tag child entries and Application Properties.Please retain only one maps.v2.API_KEY."/>
					</then>
				</if>
				<if>
					<equals arg1="${mapv2keyadded}" arg2="true"/>
					<then>
						<echo message="mapv2keyadded in application tags = ${mapv2keyadded}"/>
						<var name="mapv2_key" value="${line.separator}&lt;meta-data android:name=&quot;com.google.android.gms.version&quot; 
						android:value=&quot;@integer/google_play_services_version&quot;/&gt;"/>
					</then>
					<else>
						<echo message="The value of googlemapv2key in project properties is ${googlemapv2key}" />
						<var name="mapv2_key" value="&lt;meta-data android:name=&quot;com.google.android.maps.v2.API_KEY&quot; android:value=&quot;${googlemapv2key}&quot;/&gt;${line.separator}
						&lt;meta-data android:name=&quot;com.google.android.gms.version&quot; 
						android:value=&quot;@integer/google_play_services_version&quot;/&gt;
						"/>
					</else>
				</if>			
			</else>
		</if>
		<if>
			<or>
				<equals arg1="${mapv2keyadded}" arg2="true"/>
				<equals arg1="${googlemapv2keyadded}" arg2="true" />
				<equals arg1="${usesmaps}" arg2="true"/>
			</or>
			<then>
				<copy file="${extres}/mapv2.xml" tofile="${app.dir}/res/layout/mapv2.xml" overwrite="true"/>	
				<ant antfile="${currentfile}" target="add-googleplayservices-gradle-dependencies">
					<property name="libtype" value="map"/>
				</ant>					
				<var name="mapv2_permissions" 
							value="&lt;permission android:name=&quot;${package}.permission.MAPS_RECEIVE&quot; android:protectionLevel=&quot;signature&quot;/&gt;${line.separator}
							&lt;uses-permission android:name=&quot;${package}.permission.MAPS_RECEIVE&quot;/&gt;${line.separator}
							&lt;uses-permission android:name=&quot;com.google.android.providers.gsf.permission.READ_GSERVICES&quot;/&gt;${line.separator}
							&lt;uses-feature android:glEsVersion=&quot;0x00020000&quot;/&gt;"/>
			</then>
		</if>
		<echo> MapV2 Metadata-Key: ${mapv2_key} </echo>
		<echo> MapV2 Permissions: ${mapv2_permissions} </echo>
		<replace file="${app.dir}/AndroidManifest.xml" token="$MAPV2_KEY" value="${mapv2_key}" />
		<replace file="${app.dir}/AndroidManifest.xml" token="$MAPV2_PERMISSIONS" value="${mapv2_permissions}" />	
	</target>
		
	<target name="copy-PaaS-resources">
		<delete dir="${app.dir}/src/com/konylabs/js/appsrc"/>
		<available file="${extres}/paas/license.js" type="file" property="extres.paas.license"/>
		<if>
    		<equals arg1="${extres.paas.license}" arg2="true"/>
    		<then>
				<loadfile property="appsrc" srcFile="${extres}/paas/license.js"/>
				<!-- Check if file is empty -->
				<if>
					<equals arg1="${appsrc}" arg2="$${appsrc}"/>
					<then>
						<property name="escjssrc" value=""/>
					</then>
					<else>
						<escapejssource property="escjssrc" appSource="${appsrc}" />
					</else>
				</if>
				<mkdir dir="${app.dir}/src/com/konylabs/js/appsrc" />
				<copy file="${extres}/JSSourceFileTemplate.java" tofile="${app.dir}/src/com/konylabs/js/appsrc/PaaSLicenseSource.java" overwrite="true" />
				<replace file="${app.dir}/src/com/konylabs/js/appsrc/PaaSLicenseSource.java" token="$SourceFileName" value="PaaSLicenseSource"/>
				<replace file="${app.dir}/src/com/konylabs/js/appsrc/PaaSLicenseSource.java" token="$JSSource" value="${escjssrc}"/>
			</then>
		</if>
	</target>
	
	<target name="copy-VideoWidget-resources">
		<available file="${extres}/konyVideoWidget.js" type="file" property="extres.videowidget"/>
		<if>
    		<equals arg1="${extres.videowidget}" arg2="true"/>
    		<then>
				<loadfile property="videowidgetsrc" srcFile="${extres}/konyVideoWidget.js"/>
				<!-- Check if file is empty -->
				<if>
					<equals arg1="${videowidgetsrc}" arg2="$${videowidgetsrc}"/>
					<then>
						<property name="escvideowidgetsrc" value=""/>
					</then>
					<else>
						<escapejssource property="escvideowidgetsrc" appSource="${videowidgetsrc}" />
					</else>
				</if>
				<mkdir dir="${app.dir}/src/com/konylabs/js/appsrc" />				
				<copy file="${extres}/JSSourceFileTemplate.java" tofile="${app.dir}/src/com/konylabs/js/appsrc/KonyVideoWidget.java" overwrite="true" />
				<replace file="${app.dir}/src/com/konylabs/js/appsrc/KonyVideoWidget.java" token="$SourceFileName" value="KonyVideoWidget"/>
				<replace file="${app.dir}/src/com/konylabs/js/appsrc/KonyVideoWidget.java" token="$JSSource" value="${escvideowidgetsrc}"/>
			</then>
		</if>
	</target>
	
	<target name="copyassets">
        <echo>Copying the resources to android assets</echo>		
		<if>
			<equals arg1="${isFPbuild}" arg2="true"/>
			<then>
		<concat fixlastline="yes" destfile="${assets.dir}/application.properties" append="true">			
			UseSQLCipherFIPS : false
			UseCryptoLibrary : false
			EnableJSBindings : true
		</concat>			
			</then>
			<else>
				<if>
					<equals arg1="${splash.image}" arg2="$${splash.image}"/>
					<then>
						<property name="splashScreenImg" value=""/>
					</then>
					<else>
						<property name="splashScreenImg" value="${splash.image}"/>
						<!-- copy file="${resfolder}/build/${splash.image}" tofile="${app.dir}/res/drawable/${splash.image}" overwrite="true"/-->
					</else>
				</if>			
				<copy file="application.properties" tofile="${assets.dir}/application.properties" overwrite="true"/> 
				<tstamp>
					<format property="currenttime" pattern="yyyyMMddHHmmss"/>
				</tstamp>
				<concat fixlastline="yes" destfile="${assets.dir}/application.properties" append="true">
					Splash-FG: ${splash.fgcolor}
					Splash-BG: ${splash.bgcolor}
					Splash-LI: ${splash.li}
					Splash-IMG: ${splashScreenImg}
					Splash-ANIM-DURATION: ${splash.animation.duration}
					Splash-ANIM-IMGLIST: ${splash.animation.images}
					Splash-VIDEO: ${splash.video}
					Splash-VIDEO-INTERRUPTIBLE: ${splash.video.interruptable}
					Splash-ORIENTATION : ${splash.orientation}
					BUILD: ${build.option.local}
					DevLang : ${dev.language}
					Var:${currenttime}
					EnableIdForAutomation : ${enableIdForAutomation}
					DisableApplicationScreenshot : ${DisableApplicationScreenshot}
					isUniversalApp : ${isUniversalApp}
					UseSQLCipherFIPS : ${UseSQLCipherFIPS}
					UseCryptoLibrary : ${UseOpenSSLLibrary}
				</concat>			
				<echo>DefaultLocale = ${DefaultLocale}</echo>		
				<if>
					<not>
						  <equals arg1="${DefaultLocale}" arg2="$${DefaultLocale}"/>
					</not>		
					<then>
				<concat  destfile="${assets.dir}/application.properties" append="true">
					DefaultLocale:${DefaultLocale}
				</concat>
					</then>
				</if> 			
				<if>
					<equals arg1="${enableJSBindings}" arg2="true"/>
					<then>
				<concat destfile="${assets.dir}/application.properties" append="true">
					EnableJSBindings : ${enableJSBindings}
				</concat>
					</then>
					<else>
				<concat destfile="${assets.dir}/application.properties" append="true">
					EnableJSBindings : ${enableMobileFirstAPIs}
				</concat>
					</else>
				</if>
				<if>
					<equals arg1="${automationEnabled}" arg2="true"/>
					<then>
						<concat destfile="${assets.dir}/application.properties" append="true">
							AutomationEnabled : ${automationEnabled}
						</concat>
					</then>
				</if>
				<if>
					<not>
						<equals arg1="${EnableBox2FlexConversion}" arg2="$${EnableBox2FlexConversion}"/>
					</not>
					<then>
						<concat  destfile="${assets.dir}/application.properties" append="true">
							EnableBox2FlexConversion:${EnableBox2FlexConversion}
						</concat>
					</then>
				</if>
				<replace file="${assets.dir}/application.properties" token="^(App-URL.+$)" value="App-URL=http://${machineip}:${jetty.portnum}/${appid}r/s" />				
			</else>
		</if>
		<concat fixlastline="yes" destfile="${assets.dir}/application.properties" append="true">
			AppMode : ${hybridmode}
			EnableActionBar : ${actionbar}
			AllowSelfSignedCerts : ${allowselfsignedcertificates}
			UseGooglePlayLocationServices : ${usegoogleplaylocationservices.local}
			PushNotificationType : ${push_notification_type.local}
			AppID: ${appid}
		</concat>
		<!--Wear is not supported in Function Preview -->
		<if>
			<equals arg1="${isFPbuild}" arg2="false"/>
			<then>
				<available file="pluginversions.properties" type="file" property="pluginversions.properties.present" /> 
				<if>
					<equals arg1="${pluginversions.properties.present}" arg2="true" /> 
					<then>
						<copy file="pluginversions.properties" tofile="${assets.dir}/pluginversions.properties" overwrite="true" failonerror="false"/>
					 <if>
						<equals arg1="${isWatchBuild.Local}" arg2="true"/>              
						 <then>
								<concat fixlastline="yes" destfile="${assets.dir}/pluginversions.properties" append="true">TargetBuild=Watch</concat>
						 </then>
						 <else>
								<concat fixlastline="yes" destfile="${assets.dir}/pluginversions.properties" append="true">TargetBuild=Mobile</concat>
						 </else>
					</if>        
				</then>
				</if> 			
				<available file="${i18n.android.properties}" type="dir" property="locales.present" /> 
				<if>
					<equals arg1="${locales.present}" arg2="true" /> 
					<then>
						<copy todir="${assets.dir}" overwrite="true">
							<fileset dir="${i18n.android.properties}" includes="*.prop"/>
						</copy>
						<if>
							<or>
							<equals arg1="${hybridmode}" arg2="wrapper"/>
							<equals arg1="${hybridmode}" arg2="mixed"/>
							</or>
							<then>
								<mkdir dir="${assets.dir}/web"/>
								<mkdir dir="${assets.dir}/web/resources"/>
								<mkdir dir="${assets.dir}/web/resources/strings"/>
								<copy todir="${assets.dir}/web/resources/strings" overwrite="true">
									<fileset dir="${resfolder}/i18n/iphone_properties" includes="*.prop"/>
									<mapper type="glob" from="*.prop" to="*.js"/>
								</copy>
								<replaceregexp match="(.*)" replace="var i18nObject = {\1}" flags="s" byline="false">
									<fileset dir="${assets.dir}/web/resources/strings" includes="*.js"/>
								</replaceregexp>
								<replace dir="${assets.dir}/web/resources/strings">
									<include name="*.js"/>
									<replacefilter token="&quot;=&quot;" value="&quot;:&quot;"/>
									<replacefilter token="&quot;;" value="&quot;,"/>
								</replace>
							</then>
						</if>
					</then>
				</if>
				<if>
					<equals arg1="${dev.language}" arg2="js"/>
					<then> 
							<ant antfile="${currentfile}" target="copy-PaaS-resources"/>					
							<!-- Create secure source for VideoWidget file -->	
							<if> 
								<equals arg1="${usesvideo}" arg2="true"/> 
								<then>
									<ant antfile="${currentfile}" target="copy-VideoWidget-resources"/>								
								</then>
							</if>							
						   <ant dir="." antfile="build-jssource.xml" inheritAll="true">
								<property name="app.dir" value="${app.dir}"/>
								<property name="assets.dir" value="${assets.dir}"/>          
								<property name="jssrc.dir" value="${jssrc.dir}"/>
								<property name="packagepath" value="${packagepath}"/>
								<property name="secureappsource" value="true"/>								
								<property name="platform.lib.metrics.thirdparty" value="${platform.lib.metrics.thirdparty}"/>
								<property name="usesvideo" value="${usesvideo}"/>
								<property name="enablecordova" value="${enableCordova}"/>
							</ant>
					</then>

				</if>
				<if>
					<equals arg1="${locales}" arg2="" />
					<then>
						<property name="langlocales.present" value="false"/>	
					</then>
					<else>
						<property name="langlocales.present" value="true"/>	
					</else>
				</if>
				<if>
					<and>
						<equals arg1="${common.present}" arg2="true"/>
						<equals arg1="${langlocales.present}" arg2="true"/>
					</and>
					<then>
						<for list="${locales}" param="letter">
							<sequential>
								<propertyregex property="folderval" override="true"
									  input="@{letter}"
									  regexp="([^\.]*)\_([^\.]*)"
									  replace="drawable-\1-r\2"
									  casesensitive="false" />
								<if>
									<equals arg1="${folderval}" arg2="$${folderval}"/>
									<then>
										<property name="folderval" value="drawable-@{letter}"/>
									</then>
								</if>
								<copy todir="${app.dir}/res/${folderval}" overwrite="true">
									<fileset dir="${resfolder}/${resources.common.folder}/@{letter}" includes="**/**"/>
								</copy>
							</sequential>
						</for>
					</then>
				</if>
				<available file="${resfolder}/fonts" type="dir" property="fonts.present"/>
				<mkdir dir="${assets.dir}/fonts"/>
				<if>
					<equals arg1="${fonts.present}" arg2="true"/>
					<then>
						<copy todir="${assets.dir}/fonts" overwrite="true">
							<fileset dir="${resfolder}/fonts" includes="*.ttf, *.ttc, *.otf, *.xml"/>
						</copy>
					</then>
				</if>
				<if>
					<equals arg1="${platform.folder}" arg2="$${platform.folder}"/>
					<then>   
						 <if>
							   <equals arg1="${isWatchBuild.Local}" arg2="true"/>               
							   <then>
									  <property name="platform.folder" value="androidwearos"/>	
								   </then>
								   <else>
									 <property name="platform.folder" value="android"/>	
								   </else>
							   </if> 
					</then>
				 </if>
				<available file="${resfolder}/fonts/${resource.font.folder}" type="dir" property="androidfonts.present"/>
				<if>
					<equals arg1="${androidfonts.present}" arg2="true"/>
					<then>
						<copy todir="${assets.dir}/fonts" overwrite="true">
							<fileset dir="${resfolder}/fonts/${resource.font.folder}" includes="*.*"/>
						</copy>
					</then>
				</if>   	
				<available file="${appfolder}/${outputdir}/${codedir}/themes/${platform.folder}" type="dir" property="androidthemes.present"/>        
				<if>
					<equals arg1="${androidthemes.present}" arg2="true"/>
					<then>
						<echo>Copying theme files</echo>
						<copy todir="${assets.dir}" overwrite="true">
							<fileset dir="${appfolder}/${outputdir}/${codedir}/themes/${platform.folder}" includes="*.theme"/>
						</copy>
					</then>	
				</if>
				<!--Copying App icon images -->
				<available file="${resfolder}/build" type="dir" property="builddir.present"/>
				<if>
					<equals arg1="${builddir.present}" arg2="true"/>
					<then>
						<!--Copying App icon images -->
						<copy todir="${assets.dir}" overwrite="true">
							<fileset dir="${resfolder}/build" includes="*.*"/>
						</copy>
					</then>	
				</if>
			</then>
		</if>
		
		<echo>hybridmode..........${hybridmode}</echo>
		<if>
			<equals arg1="${hybridmode}" arg2="native"/>
			<then>
				<ant antfile="${currentfile}"  target="copynativeresources"/> 
				<ant antfile="${currentfile}"  target="copyninepatchimages"/> 
			</then>
		<else>
			<if>
				<equals arg1="${hybridmode}" arg2="wrapper"/>
				<then>
					<ant antfile="${currentfile}"  target="copy-spa-resources"/> 
					<ant antfile="${currentfile}"  target="copysplashresources"/> 
				</then>
			<else>
				<if>
					<equals arg1="${hybridmode}" arg2="mixed"/>
					<then>
						<ant antfile="${currentfile}"  target="copynativeresources"/> 
						<ant antfile="${currentfile}"  target="copy-spa-resources"/> 
						<ant antfile="${currentfile}"  target="copyninepatchimages"/> 
					</then>
				</if>
			</else>
			</if>
		</else>
		</if>
		
		<if>
			<equals arg1="${isFPbuild}" arg2="false"/>
			<then>				

				<if>
					<not>
						  <equals arg1="${logo}" arg2=""/>
					</not>
					<then>
						<echo>Copying icon file ${logo} </echo>
						<if>
							<not>
							<equals arg1="${ismipmapicon}" arg2="true"/>
							</not>
							<then>
								<copy file="${app.dir}/res/drawable/${logo}" tofile="${app.dir}/res/drawable/${ApplicationId}_icon.png" overwrite="true" preservelastmodified="true"/>
							</then>
						</if>		
					</then>
				</if> 
				</then>
		</if>
				
    	<available file="${customlibs.dir}/${platform.folder}" type="dir" property="libraries.dir.available"/>
    	<if>
	    	<!--Copying 3rd party libraries -->
			<equals arg1="${libraries.dir.available}" arg2="true"/>
    		<then>
    			<echo>Copying third party libraries</echo>
				<copy todir="${libs.dir}" overwrite="true" >
					<fileset dir="${customlibs.dir}/${platform.folder}" includes="**/*.*"/>
				</copy>
			</then>
			<else>
				<echo message="No 3rd party libraries found"></echo>
			</else>
    	</if>
		<!-- Done: Copying 3rd party libraries  -->
		<!-- Copying wrapper classes to src folder-->
		<available file="${customlibs.src.dir}/${platform.folder}" type="dir" property="ffi.dir.available"/>
		<if>
			<equals arg1="${ffi.dir.available}" arg2="true"/>
			<then>
				<echo message="Copying ffi templates to src folder"/> 
				<copy todir="${src.dir}" overwrite="true">
					<fileset dir="${customlibs.src.dir}/${platform.folder}" includes="**/*.*"/>
				</copy>
			</then>
		</if>
		<!-- Done: Copying wrapper classes to src folder-->
		
		<!--Copying custom widget libraries -->
		<available file="${customwidgets.dir}/${platform.folder}" type="dir" property="cwlibs.dir.available"/>
    	<if>
			<equals arg1="${cwlibs.dir.available}" arg2="true"/>
    		<then>
    			<echo>Copying third party libraries</echo>
				<copy todir="${libs.dir}" overwrite="true" >
					<fileset dir="${customwidgets.dir}/${platform.folder}" includes="*.*"/>
				</copy>
			</then>
			<else>
				<echo message="No custom widget libraries found"></echo>
			</else>
    	</if>
		<!-- Done: Copying custom widget libraries  -->
		<!-- Copying custom widget classes to src folder-->
		<available file="${customwidgets.src.dir}/${platform.folder}" type="dir" property="cwsrc.dir.available"/>
		<if>
			<equals arg1="${cwsrc.dir.available}" arg2="true"/>
			<then>
				<echo message="Copying custom widget templates to src folder"/> 
				<copy todir="${src.dir}" overwrite="true">
					<fileset dir="${customwidgets.src.dir}/${platform.folder}" includes="**/*.*"/>
				</copy>
			</then>
		</if>
		<!-- Done: Copying custom widget src files -->
    	<mkdir dir="${libs.dir}"/>
		<echo>thirdparty dir::::${thirdparty.libs.dir} </echo>	
		<if>
			<and>
				<not>
					<equals arg1="${thirdparty.libs.dir}" arg2="$${thirdparty.libs.dir}"/>
				</not>
				<not>
					<equals arg1="${thirdparty.libs.dir}" arg2=""/>
				</not>
			</and>
			<then>
				<for param="libzip" list="${thirdparty.libs.dir}" delimiter=",">
					<sequential>
						<if>
							<available file="@{libzip}" type="file" />
							<then>
								<echo>unziping zip file::::@{libzip} </echo>
								<unzip src="@{libzip}" dest="${libs.dir}">
									<mapper type="flatten" />
									<patternset>
										<include name="**/*.jar"/>
										<include name="**/*.aar"/>
									</patternset>
								</unzip>
							</then>
						</if>
					</sequential>
					</for>
			</then>
		</if>		
		<if>
			<equals arg1= "${enableIdForAutomation}" arg2= "false"/>
			<then>
				<delete file="${app.dir}/res/values/widgetids.xml"/>
				<delete file="${app.dir}/res/values/dynamicwidgetids.xml"/>				
			</then>
		</if>
    </target>
    
	<target name="copynativeresources">
	<property name="rawFolderFiles" value="*.mp4 *.mov *.avi *.mjpeg *.m4v *.cer"/>
	<if>
		<equals arg1="${isFPbuild}" arg2="false"/>
		<then>
			<property name="isoverwrite" value="true"/>
		</then>
		<else>
			<property name="isoverwrite" value="false"/>
		</else>
	</if>
        <echo>Copying the native resources to android assets</echo>
	 <if>
         <not>
              <equals arg1="${isWatchBuild.Local}" arg2="true"/>
         </not>              
         <then> 
    	<available file="${resfolder}/${resources.common.folder}" type="dir" property="common.present"/>
    	<if>
    		<equals arg1="${common.present}" arg2="true"/>
    		<then>
    	        <copy todir="${app.dir}/res/drawable" overwrite="${isoverwrite}" preservelastmodified="true">
    	            <fileset dir="${resfolder}/${resources.common.folder}" includes="*.png, *.9.png, *.jpg, *.gif,*.xml"  excludes="${rawFolderFiles}"/>
    	        </copy>
				<copy todir="${app.dir}/res/raw" overwrite="${isoverwrite}" preservelastmodified="true">
    	            <fileset dir="${resfolder}/${resources.common.folder}" includes="${rawFolderFiles}"/>
    	        </copy>
				<copy todir="${app.dir}/res/raw" overwrite="${isoverwrite}" preservelastmodified="true" failonerror="false">
    	            <fileset dir="${resfolder}/${resources.common.folder}/videos" includes="${rawFolderFiles}"/>
    	        </copy>				
				<copy todir="${app.dir}/res" overwrite="${isoverwrite}" preservelastmodified="true">
			        <fileset dir="${resfolder}/${resources.category.common.folder}" includes="raw*/*"/>
    	        </copy>	
    		</then>
    		<else>
    	        <copy todir="${app.dir}/res/drawable" overwrite="${isoverwrite}" preservelastmodified="true">
    	            <fileset dir="${resfolder}" includes="*.*" excludes="*.ttf *.otf"/>
    	        </copy>
    		</else>
    	</if>
		</then> 
      </if> 
		<available file="${resfolder}/${resources.category.common.folder}" type="dir" property="category.common.present"/>
    	<if>
    		<equals arg1="${category.common.present}" arg2="true"/>
    		<then>
    	        <copy todir="${app.dir}/res/drawable" overwrite="${isoverwrite}" preservelastmodified="true">
    	            <fileset dir="${resfolder}/${resources.category.common.folder}" includes="*.png, *.9.png, *.jpg, *.gif,*.xml"  excludes="${rawFolderFiles}"/>
    	        </copy>
				<copy todir="${app.dir}/res/raw" overwrite="${isoverwrite}" preservelastmodified="true">
    	            <fileset dir="${resfolder}/${resources.category.common.folder}" includes="${rawFolderFiles}"/>
    	        </copy>
				<copy todir="${app.dir}/res/raw" overwrite="${isoverwrite}" preservelastmodified="true" failonerror="false">
    	            <fileset dir="${resfolder}/${resources.category.common.folder}/videos" includes="${rawFolderFiles}"/>
    	        </copy>				
    		</then>
    		<else>
    	        <copy todir="${app.dir}/res/drawable" overwrite="${isoverwrite}" preservelastmodified="true">
    	            <fileset dir="${resfolder}" includes="*.*" excludes="*.ttf *.otf"/>
    	        </copy>
    		</else>
    	</if>
		
		<if>
			<equals arg1="${resources.platform.folder}" arg2="$${resources.platform.folder}"/>
             <then>
                <if>                  
                    <equals arg1="${isWatchBuild.Local}" arg2="true"/>               
                    <then>
                        <property name="resources.platform.folder" value="androidwear/native/androidwearos"/>	
                    </then>
                    <else>
                        <property name="resources.platform.folder" value="mobile/native/android"/>	
                    </else>
                </if>  					
			</then>
		</if>
		<if>
			<equals arg1="${platform.folder}" arg2="$${platform.folder}"/>
			<then>
                 <if>
                    <equals arg1="${isWatchBuild.Local}" arg2="true"/>               
                    <then>
                      <property name="platform.folder" value="androidwearos"/>	
                    </then>
                    <else>
                      <property name="platform.folder" value="android"/>	
                    </else>
                 </if> 
             </then>
		</if>
		<available file="${resfolder}/${resources.platform.folder}" type="dir" property="richandroid.present"/>
    	<if>
    		<equals arg1="${richandroid.present}" arg2="true"/>
    		<then>
    	        <copy todir="${app.dir}/res" overwrite="${isoverwrite}" preservelastmodified="true">
					<dirset dir="${resfolder}/${resources.platform.folder}" includes="drawable*"/>
					<fileset dir="${resfolder}/${resources.platform.folder}" includes="drawable*/*.*"/>
					<dirset dir="${resfolder}/${resources.platform.folder}" includes="mipmap*"/>
					<fileset dir="${resfolder}/${resources.platform.folder}" includes="mipmap*/*.*"/>
    	        </copy>
				<copy todir="${app.dir}/res/drawable" overwrite="${isoverwrite}" preservelastmodified="true">
					<fileset dir="${resfolder}/${resources.platform.folder}" includes="*.*" excludes="*.mp4 *.mov *.avi *.mjpeg *.m4v"/>
    	        </copy>
				<copy todir="${app.dir}/res" overwrite="${isoverwrite}" preservelastmodified="true">
					<dirset dir="${resfolder}/${resources.platform.folder}" includes="layout*"/>
					<fileset dir="${resfolder}/${resources.platform.folder}" includes="layout*/*.*"/>
    	        </copy>
				<copy todir="${app.dir}/res" overwrite="${isoverwrite}" preservelastmodified="true">
					<dirset dir="${resfolder}/${resources.platform.folder}" includes="xml*"/>
					<fileset dir="${resfolder}/${resources.platform.folder}" includes="xml*/*.*"/>
    	        </copy>
				<!--FilesToMergeList is list of files for which xml merging is done-->
				<property name="FilesToMergeList" value="values/localnotificationconfig.xml${line.separator}values/locationconfig.xml${line.separator}values/pushconfig.xml${line.separator}values/netconfig.xml"/>
				<!--The merged files from values folder needs to be skipped while overriding the complete values folder from customer given resources on the genrated values folder in app--> 
				<!-- As excludesfile in copytask takes only file as argument, with list of files to exclude, we write files to be merged as excludelist into MergeFileList.txt file -->
				<echo file="${extres}/MergeFileList.txt" append="false">${FilesToMergeList}</echo>
				<!--excludes tag must be given first prior to include tag else exclude tag is ignored while copying-->
				<copy todir="${app.dir}/res" overwrite="${isoverwrite}" preservelastmodified="true">
					<dirset dir="${resfolder}/${resources.platform.folder}" includes="values*"/>
					<fileset dir="${resfolder}/${resources.platform.folder}" excludesfile="${extres}/MergeFileList.txt" includes="values*/*.*"/>
				</copy>
				<!--below task replaces line separator with a space in FilesToMergeList property(so that it becomes suitable to be passed as an argument to the jar file)-->
				<propertyregex property="FilesToMergeListasArg" input="${FilesToMergeList}" regexp="${line.separator}" replace=" " global="true" />
				<java fork="true" failonerror="yes" jvm="${installer.javahome}/bin/java" jar="${extres}/XMLMerger.jar">
				<arg line="${DoubleQuotes}${resfolder}/${resources.platform.folder}${DoubleQuotes} ${DoubleQuotes}${app.dir}/res${DoubleQuotes} ${FilesToMergeListasArg}"/>
				</java>
				<copy todir="${app.dir}/res" overwrite="${isoverwrite}" preservelastmodified="true">
					<dirset dir="${resfolder}/${resources.platform.folder}" includes="raw*"/>
					<fileset dir="${resfolder}/${resources.platform.folder}" includes="raw*/*"/>
				</copy>
				<copy todir="${app.dir}/res/raw" overwrite="${isoverwrite}" preservelastmodified="true">
					<fileset dir="${resfolder}/${resources.platform.folder}" includes="*.mp4 *.mov *.avi *.mjpeg *.m4v"/>
				</copy>
				<copy todir="${app.dir}/res/raw" overwrite="${isoverwrite}" preservelastmodified="true" failonerror="false">
					<fileset dir="${resfolder}/${resources.platform.folder}/videos" includes="*.mp4 *.mov *.avi *.mjpeg *.m4v"/>
				</copy>				
				<copy todir="${app.dir}/res" overwrite="${isoverwrite}" preservelastmodified="true">
					<dirset dir="${resfolder}/${resources.platform.folder}" includes="anim*"/>
					<fileset dir="${resfolder}/${resources.platform.folder}" includes="anim*/*.*"/>
				</copy>
				<available file="${resfolder}/${resources.platform.folder}/assets" type="dir" property="android.res.assets.present"/>
				<if>
					<equals arg1="${android.res.assets.present}" arg2="true"/>
					<then>
						<copy todir="${assets.dir}" overwrite="${isoverwrite}" preservelastmodified="true">
							<dirset dir="${resfolder}/${resources.platform.folder}/assets" />
							<fileset dir="${resfolder}/${resources.platform.folder}/assets" />
						</copy>
					</then>
				</if>
    		</then>
    		<else>
				<available file="${resfolder}/${platform.folder}" type="dir" property="android.present"/>
				<if>
					<equals arg1="${android.present}" arg2="true"/>
					<then>
						<copy todir="${app.dir}/res" overwrite="${isoverwrite}" preservelastmodified="true">
							<dirset dir="${resfolder}/${platform.folder}" includes="drawable*"/>
							<fileset dir="${resfolder}/${platform.folder}" includes="drawable*/*.*"/>
						</copy>
						<copy todir="${app.dir}/res/drawable" overwrite="${isoverwrite}" preservelastmodified="true">
							<fileset dir="${resfolder}/${platform.folder}" includes="*.*"/>
						</copy>
					</then>
				</if>
    		</else>
    	</if>
		<if>
    		<equals arg1="${common.present}" arg2="true"/>
    		<then>
    	        <copy todir="${assets.dir}" overwrite="${isoverwrite}" preservelastmodified="true"> 
    	            <fileset dir="${resfolder}/${resources.common.folder}" includes="*.cer" />
    	        </copy>
			</then>
    	</if>
		<if>
    		<equals arg1="${category.common.present}" arg2="true"/>
    		<then>
    	        <copy todir="${assets.dir}" overwrite="${isoverwrite}" preservelastmodified="true">
    	            <fileset dir="${resfolder}/${resources.category.common.folder}" includes="*.cer" />
    	        </copy>
			</then>
    	</if>
 	</target>
	
	<target name="copyninepatchimages">
        <echo>Copying the nine patch images and delete the actual png image in android drawable folder</echo>
		<for param="file">
			<path>
				<fileset dir="${app.dir}/res/drawable">
					<include name="**/*.9.png"/>
				</fileset>
			</path>
			<sequential> 
				<ant antfile="${currentfile}"  target="check-for-actual-png-file">
					<property name="actual-png" value="@{file}" />				
				</ant>		
			</sequential>				
		</for>
	</target>
	
	<target name="check-for-actual-png-file">	
		<basename file="${actual-png}" property="actual-pngfile-name" />				
		<propertyregex property="actual.png" input="${actual-pngfile-name}" regexp="(.*)\.9\.png" select="\1.png" casesensitive="false" />
		<delete file="${app.dir}/res/drawable/${actual.png}" />
	</target>
	
	<target name="copy-spa-resources">
		<mkdir dir="${assets.dir}/web"/>
		<mkdir dir="${assets.dir}/web/images"/>
		
		<available file="${webmodule.loc}" type="dir" property="webres.present"/>
    	<if>
    		<equals arg1="${webres.present}" arg2="true"/>
    		<then>
    	        <copy todir="${assets.dir}/web" overwrite="true" preservelastmodified="true">
    	            <fileset dir="${webmodule.loc}" includes="**/*.*"/>
    	        </copy>
			</then>
    	</if>
		<foreach target="copy-spa-image-folder" param="spaimgdir.res" inheritall="true">
			<path>
				<dirset dir="${resfolder}/${resources.mobile.web}/spaandroid">
					<include name="images*"/>
				</dirset>
			</path>
		</foreach>
		<available file="${hybridmode.dir}" type="dir" property="hybridmode.present"/>
    	<if>
    		<equals arg1="${hybridmode.present}" arg2="true"/>
    		<then>    	    
    	        <copy todir="${assets.dir}/web" overwrite="true" preservelastmodified="true">
    	            <fileset dir="${hybridmode.dir}" includes="**/*.*"/>
    	        </copy>
			</then>
    	</if>
		<copy file="${extres}/nativeplatform.js" tofile="${assets.dir}/web/appjs/nativeplatform.js" overwrite="true"/>
	</target>
	
 	<target name="copy-spa-image-folder">
		<propertyregex 	property="spaimgdir.assets" input="${spaimgdir.res}" regexp=".*images(.*)$" select="\1"/>
		<mkdir dir="${assets.dir}/web/images/${spaimgdir.assets}"/>
		
		<available file="${resfolder}/${resources.common.folder}" type="dir" property="common.present"/>
    	<if>
    		<equals arg1="${common.present}" arg2="true"/>
    		<then>
				<copy todir="${assets.dir}/web/images/${spaimgdir.assets}" overwrite="true" preservelastmodified="true">
					<fileset dir="${resfolder}/${resources.common.folder}" includes="*.*" excludes="*.cer" />
				</copy>
			</then>
		</if>
		<available file="${resfolder}/${resources.category.common.folder}" type="dir" property="category.common.present"/>
		<if>
    		<equals arg1="${category.common.present}" arg2="true"/>
    		<then>
				<copy todir="${assets.dir}/web/images/${spaimgdir.assets}" overwrite="true" preservelastmodified="true">
					<fileset dir="${resfolder}/${resources.category.common.folder}" includes="*.*" excludes="*.cer" />
				</copy>
			</then>
		</if>
		<available file="${resfolder}/${resources.mobile.web}/spaandroid" type="dir" property="spaandroid.present"/>
    	<if>
			<equals arg1="${spaandroid.present}" arg2="true"/>
    		<then>
				<copy todir="${assets.dir}/web/images/${spaimgdir.assets}" overwrite="true" preservelastmodified="true">
					<fileset dir="${resfolder}/${resources.mobile.web}/spaandroid" includes="*.*"/>
				</copy>
			</then>
		</if>
		<copy todir="${assets.dir}/web/images/${spaimgdir.assets}" overwrite="true" preservelastmodified="true">
			<fileset dir="${resfolder}/${resources.mobile.web}/spaandroid/images${spaimgdir.assets}" includes="*.*"/>
		</copy>
		<echo message="---webcommons.plugin.loc---- ${webcommons.plugin.loc}"/>
		<echo message="---assets.dir---- ${assets.dir}/web/images/${spaimgdir.assets}"/>
		<available file="${webcommons.plugin.loc}/common/wap/inputdata/webfiles/iphone" type="dir" property="tc.images.present"/>
		<if>
		<equals arg1="${tc.images.present}" arg2="true"/>
		<then>
			<echo message = "Came inside the tc common images"/>
			<copy todir="${assets.dir}/web/images/${spaimgdir.assets}" overwrite="true" preservelastmodified="true">
				<fileset dir="${webcommons.plugin.loc}/common/wap/inputdata/webfiles/iphone" includes="*.*"/>
			</copy>
		</then>
		</if>
	</target>
    
	<target name="copysplashresources">
		<if>
		<equals arg1="${isFPbuild}" arg2="false"/>
		<then>
			<propertyregex property="splashAnimImages" input="${splash.animation.images}" regexp="," replace=" "/>
				<echo>Copying logo and splash resources *${logo}* *${splashScreenImg}* *${splashAnimImages}*</echo>
				<available file="${resfolder}/${resources.common.folder}" type="dir" property="common.present"/>
				<if>
					<equals arg1="${common.present}" arg2="true"/>
					<then>
						<copy todir="${app.dir}/res/drawable" overwrite="true" preservelastmodified="true">
							<fileset dir="${resfolder}/${resources.common.folder}" includes="${logo} ${splashScreenImg} ${splashAnimImages}"/>
						</copy>
						<copy todir="${app.dir}/res/raw" overwrite="true" preservelastmodified="true">
							<fileset dir="${resfolder}/${resources.common.folder}" includes="${splash.video}"/>
						</copy>
					</then>
					<else>
						<copy todir="${app.dir}/res/drawable" overwrite="true" preservelastmodified="true">
							<fileset dir="${resfolder}" includes="${logo} ${splashScreenImg} ${splashAnimImages}"/>
						</copy>
					</else>
				</if>
				<available file="${resfolder}/${resources.category.common.folder}" type="dir" property="category.common.present"/>
				<if>
					<equals arg1="${category.common.present}" arg2="true"/>
					<then>
						<copy todir="${app.dir}/res/drawable" overwrite="true" preservelastmodified="true">
							<fileset dir="${resfolder}/${resources.category.common.folder}" includes="${logo} ${splashScreenImg} ${splashAnimImages}"/>
						</copy>
						<copy todir="${app.dir}/res/raw" overwrite="true" preservelastmodified="true">
							<fileset dir="${resfolder}/${resources.category.common.folder}" includes="${splash.video}"/>
						</copy>
					</then>
					<else>
						<copy todir="${app.dir}/res/drawable" overwrite="true" preservelastmodified="true">
							<fileset dir="${resfolder}" includes="${logo} ${splashScreenImg} ${splashAnimImages}"/>
						</copy>
					</else>
				</if>
				<if>
					<equals arg1="${resources.platform.folder}" arg2="$${resources.platform.folder}"/>
					<then>
						<property name="resources.platform.folder" value="mobile/native/android"/>	
					</then>
				</if>
				<if>
					<equals arg1="${platform.folder}" arg2="$${platform.folder}"/>
					<then>
						<property name="platform.folder" value="android"/>	
					</then>
				</if>
				<available file="${resfolder}/${resources.platform.folder}" type="dir" property="richandroid.present"/>
				<if>
					<equals arg1="${richandroid.present}" arg2="true"/>
					<then>
						<copy todir="${app.dir}/res" overwrite="true" preservelastmodified="true">
							<dirset dir="${resfolder}/${resources.platform.folder}" includes="drawable*"/>
						</copy>
						<if>
							<not>
								<equals arg1="${logo}" arg2=""/>
							</not>
							<then>
								<copy todir="${app.dir}/res" overwrite="true" preservelastmodified="true">
									<fileset dir="${resfolder}/${resources.platform.folder}" includes="drawable*/${logo}"/>
								</copy>
							</then>
						</if>
						<if>
							<not>
								<equals arg1="${splashScreenImg}" arg2=""/>
							</not>
							<then>
								<copy todir="${app.dir}/res" overwrite="true" preservelastmodified="true">
									<fileset dir="${resfolder}/${resources.platform.folder}" includes="drawable*/${splashScreenImg}"/>
								</copy>
							</then>
						</if>
						
						<for list="${splash.animation.images}" delimiter="," param = "val">
							<sequential>
							<echo>copying @{val} </echo>
							<copy todir="${app.dir}/res" overwrite="true" preservelastmodified="true">
								<fileset dir="${resfolder}/${resources.platform.folder}" includes="drawable*/@{val}"/>
							</copy>
							</sequential>
						</for>
						<copy todir="${app.dir}/res/drawable" overwrite="true" preservelastmodified="true">
							<fileset dir="${resfolder}/${resources.platform.folder}" includes="${logo} ${splashScreenImg} ${splashAnimImages}"/>
						</copy>
						<if>
							<not>
								<equals arg1="${splash.video}" arg2=""/>
							</not>
							<then>
								<copy todir="${app.dir}/res" overwrite="true" preservelastmodified="true">
									<dirset dir="${resfolder}/${resources.platform.folder}" includes="raw*"/>
									<fileset dir="${resfolder}/${resources.platform.folder}" includes="raw*/${splash.video}"/>
								</copy>
							</then>
						</if>
						<copy todir="${app.dir}/res/raw" overwrite="true" preservelastmodified="true">
							<fileset dir="${resfolder}/${resources.platform.folder}" includes="${splash.video}"/>
						</copy>
					</then>
					<else>
						<available file="${resfolder}/${platform.folder}" type="dir" property="android.present"/>
						<if>
							<equals arg1="${android.present}" arg2="true"/>
							<then>
								<copy todir="${app.dir}/res" overwrite="true" preservelastmodified="true">
									<dirset dir="${resfolder}/${platform.folder}" includes="drawable*"/>
								</copy>
								<for list="${splash.animation.images}" delimiter="," param = "val">
									<sequential>
										<echo>copying @{val} </echo>
										<copy todir="${app.dir}/res" overwrite="true" preservelastmodified="true">
											<fileset dir="${resfolder}/${platform.folder}" includes="drawable*/@{val}"/>
										</copy>
									</sequential>
								</for>
								<copy todir="${app.dir}/res/drawable" overwrite="true" preservelastmodified="true">
									<fileset dir="${resfolder}/${platform.folder}" includes="${logo} ${splashScreenImg} ${splashAnimImages}"/>
								</copy>
							</then>
						</if>
					</else>
				</if>
		</then>
		</if>	
 	</target>
	
	<target name="configureReleaseSignInfo">
	<if>
		<not>
			<equals arg1="${build.option.local}" arg2="debug"/>
		</not>
		<then>
		<if>
			<and>
				<not>		
				<equals arg1="${keyStoreFilePath}" arg2="$${keyStoreFilePath}"/>
				</not>
				<not>		
				<equals arg1="${keyStoreFilePath}" arg2=""/>
				</not>			
			</and>			
			<then>
				<propertyregex property="keyStoreFilePathTemp" input="${keyStoreFilePath}" regexp="\\" replace="/" defaultValue="${keyStoreFilePath}"/>			
				<if>
				<available file="${keyStoreFilePathTemp}"/>
					<then>
						<echo file="${dist.dir}/keystore.properties" >
							keyPassword=${keyPassword}
							keyStorePassword =${keyStorePassword}
							keyAlias=${keyAlias}
							keyStoreFilePath=${keyStoreFilePathTemp}
						</echo>
						<echo>keyStoreFilePath :  ${keyStoreFilePathTemp} , keyAlias : ${keyAlias} , keyStorePassword : ${keyStorePassword} , keyPassword : ${keyPassword}</echo>			
					</then>
				</if>			
			</then>
		</if>
		</then>
	</if>
	</target>
	
	<target name="signApk">
	<!--This target will sign the unsigned apk generated by release build using debug key-->
		<echo>Release apk signing started.</echo>
		<if>
			<and>
				<available file="${release}"/>
				<contains casesensitive="false" string="${release}" substring="unsigned" />
			</and>
			<then>
				<property name="release-apk-to-sign" value="${debug}"/>
				<copy file="${release}" tofile="${release-apk-to-sign}" overwrite="true"/>
				<if>
					<available file="${release-apk-to-sign}"/>
					<then>
						<property name="APKSigner.path" location="${app.dir}/../../extres/APKSigner.jar"/>
						<property name="workspace.path" location="${project.loc}/../"/>
						<echo>Invoking APKSigner.jar to sign apk</echo>
						<!--
						This APKSigner.jar does the following things
						1) Finds the .android/debug.keystore in user.home env variable and signs the apk if found
						2) If user.home doesn't contain .android folder or .android/debug.keystore ,it tries recreating it.
						3) If key is expired tries creating new one.
						4) If the .android/debug.keystore doesn't exists due to key or folder creation failure, it creates a key in <workspace>/debug.keystore if it is not already present.
						5) If <workspace>/debug.keystoreis present , it checks for the key expiry and re-creates if expired.
						6) Signs the apk using a valid debug key if it is able to create or reports failure in signing if key creation or signing fails.						
						-->
						<java jar="${APKSigner.path}" fork="true" jvm="${installer.javahome}/bin/java" failonerror="true">
							<arg line="&quot;${workspace.path}&quot;"/>
							<arg line="&quot;${release-apk-to-sign}&quot;"/>
							<arg line="&quot;${installer.javahome}&quot;"/>								
						</java>
					</then>
					<else>
						<echo>${appid}-release-unsigned.apk Apk not found to copy.</echo>
					</else>
				</if>			
			</then>

		</if>	
	</target>
	
    <target name="buildapk">
	<trycatch>
		<try>
				<echo>Java Path used by Gradle: ${installer.javahome}</echo>
				<echo>Gradle Path : ${gradle.binpath}</echo>
				<echo>Packaging the android ${appid} application</echo>
				<property name="SubstituteDriveJar" value="${extres}/SubstituteDrive.jar"/>
				
				<if>
					<equals arg1="${os.family}" arg2="windows"/>
					<then>
						<echo>Substituting drive</echo>							
						<tstamp>
							<format property="TimeStamp" pattern="yyyyMMddHHmmsssss" locale="en,GB"/>
						</tstamp>
						<if>
							<equals arg1="${isUniversalApp}" arg2 ="true" />
							<then>
								<property name="MobileUniqCode" value="${appid}-MobUniversal-${TimeStamp}" />		
							</then>
							<else>
								<property name="MobileUniqCode" value="${appid}-Mobile-${TimeStamp}" />
							</else>
						</if>	
						<echo file="${app.dir}\${MobileUniqCode}.txt">${MobileUniqCode}</echo>						
						<java fork="true" failonerror="yes" jvm="${installer.javahome}/bin/java" jar="${SubstituteDriveJar}">
							<arg value="substitute"/>
							<arg value="${app.dir}/.."/>
							<arg value="${basedir}"/>
							<arg value="${app.dir}"/>
							<arg value="${MobileUniqCode}.txt"/>
						</java>
						<if>
							<available file="${basedir}/build-drive.txt"/>
							<then>
								<loadfile property="subst-drive" srcfile="${basedir}/build-drive.txt"/>
								<length string="${subst-drive}" property="length.subst-drive"/>
								<echo>subst-drive length ${length.subst-drive} ${subst-drive}</echo>
								<if>
									<not>
									<equals arg1="${length.subst-drive}" arg2="0"/>
									</not>
									<then>
										<basename property="app.dir.name" file="${app.dir}"/>	
										<property name="app-build.dir" value="${subst-drive}:\${app.dir.name}"/>								
										<echo>app-build.dir is  ${app-build.dir}</echo>
									</then>
									<else>
										<property name="app-build.dir" value="${app.dir}"/>
										<echo>app-build.dir is  ${app-build.dir}</echo>
									</else>
								</if>
							</then>
							<else>
								<property name="app-build.dir" value="${app.dir}"/>
								<echo>app-build.dir is  ${app-build.dir}</echo>
							</else>
						</if>	
					</then>
					<else>
						<property name="app-build.dir" value="${app.dir}"/>
						<echo>app-build.dir is  ${app-build.dir}</echo>
					</else>
				</if>
				<!--isInternetConnectionAvailable property is not used currently-->
				<echo>isInternetConnectionAvailable ${isInternetConnectionAvailable}</echo>
				<echo>plugin loc ${plugin.loc} </echo>
				<property name="gradlebuild.bin" value="${app-build.dir}/gradlew"/>
							
				<if>
					<os family="windows" />
						<then>	
							<echo>${gradlebuild.bin} -version</echo>
							<exec-shell executable="cmd" failonerror="false" failifexecutionfails="false">
								<arg line='/c "${gradlebuild.bin} -version"'/>
							</exec-shell>
							
							<!--For few machines we are getting below error on windows machines.
							Build file 'A:\AppName\build.gradle' does not exist. 
							As a solution we are stopping gradle deamon to resolve the issue.
							This solution is just based on observation and may not be exact resolution.
							This stop is executed only incase of clean build and on windows machine only.-->
						<if>
                            <not>
                                <equals arg1="${killGradleDaemon}" arg2="false" />
                            </not>
							<then>
							<echo>${gradlebuild.bin} --stop</echo>	
							<exec-shell executable="cmd" failonerror="false" failifexecutionfails="false" >
								<env key="JAVA_HOME" path="${installer.javahome}"/>
								<arg line='/c "${gradlebuild.bin} --stop "'/>
							</exec-shell>
							</then>
						</if>				
							
							
							<if>
							<not>
								<equals arg1="${isIncrementalBuild.local}" arg2="true"/>
							</not>
							<then>
							
			
							<echo>isIncrementalBuild = ${isIncrementalBuild.local} invoking clean build</echo>
							<exec-shell executable="cmd" failonerror="true" failifexecutionfails="true" >
								<env key="JAVA_HOME" path="${installer.javahome}"/>
								<arg line='/c "${gradlebuild.bin} clean -b "${app-build.dir}/build.gradle" "'/>
							</exec-shell>
							</then>
							</if>
							
							<if>
								<not>
									<equals arg1="${build.option.local}" arg2="debug"/>
									<!-- Handles both release and protected cases-->
								</not>
								<then>
									<exec-shell executable="cmd" failonerror="true" failifexecutionfails="true" >
										<env key="JAVA_HOME" path="${installer.javahome}"/>
										<arg line='/c "${gradlebuild.bin} assembleRelease  -b "${app-build.dir}/build.gradle" "'/>
									</exec-shell>
									<replace file="${basedir}/outputAPKVariants.properties" token="\" value="//"/>
									 <loadproperties srcFile="${basedir}/outputAPKVariants.properties"/>	
									<if>
										<not>
											<equals arg1="${isLibraryBuild}" arg2="true" />
										</not>
										<then>
											<ant antfile="${currentfile}"  target="signApk"/> 
										</then>
									</if>
								</then>
								<else>
									<exec-shell executable="cmd" failonerror="true" failifexecutionfails="true" >
										<env key="JAVA_HOME" path="${installer.javahome}"/>
										<arg line='/c "${gradlebuild.bin} assembleDebug  -b "${app-build.dir}/build.gradle" "'/>
									</exec-shell>
								</else>
							</if>
						</then>
						<else>
							<exec-shell executable="cmd" failonerror="false" failifexecutionfails="true">
								<arg line='/c "chmod 774 ${gradlebuild.bin}"'/>
							</exec-shell>
							
							<echo>${gradlebuild.bin} -version</echo>
							<exec-shell executable="cmd" failonerror="false" failifexecutionfails="false">
								<arg line='/c "${gradlebuild.bin} -version"'/>
							</exec-shell>
							
							<!--For few machines we are getting below error on windows machines.
							Build file 'A:\AppName\build.gradle' does not exist. 
							As a solution we are stopping gradle deamon to resolve the issue.
							This solution is just based on observation and may not be exact resolution.
							This stop is executed only incase of clean build and on windows machine only.-->
								
							<if>
								<not>
									<equals arg1="${killGradleDaemon}" arg2="false" />
								</not>
								<then>
								<echo>${gradlebuild.bin} --stop</echo>	
								<exec-shell executable="cmd" failonerror="false" failifexecutionfails="false" >
									<env key="JAVA_HOME" path="${installer.javahome}"/>
									<arg line='/c "${gradlebuild.bin} --stop "'/>
								</exec-shell>
								</then>
							</if>				
				

							<if>
							<not>
								<equals arg1="${isIncrementalBuild.local}" arg2="true"/>
							</not>
							<then>		
							<echo>isIncrementalBuild = ${isIncrementalBuild.local} invoking clean build</echo>
							<exec-shell executable="cmd" failonerror="true" failifexecutionfails="true" >
								<env key="JAVA_HOME" path="${installer.javahome}"/>
								<arg line='/c "${gradlebuild.bin} clean -b "${app-build.dir}/build.gradle" "'/>
							</exec-shell>
							</then>
							</if>												
							<if>
								<not>
									<equals arg1="${build.option.local}" arg2="debug"/>
									<!-- Handles both release and protected cases-->
								</not>
								<then>
									<exec-shell executable="cmd" failonerror="true" failifexecutionfails="true" >
										<env key="JAVA_HOME" path="${installer.javahome}"/>
										<arg line='/c "${gradlebuild.bin} assembleRelease  -b "${app-build.dir}/build.gradle" "'/>
									</exec-shell>
									<replace file="${basedir}/outputAPKVariants.properties" token="\" value="//"/>
									 <loadproperties srcFile="${basedir}/outputAPKVariants.properties"/>
									<if>
										<not>
											<equals arg1="${isLibraryBuild}" arg2="true" />
										</not>
										<then>
											<ant antfile="${currentfile}"  target="signApk"/> 
										</then>
									</if>
								</then>
								<else>
									<exec-shell executable="cmd" failonerror="true" failifexecutionfails="true">
										<env key="JAVA_HOME" path="${installer.javahome}"/>
										<arg line='/c "${gradlebuild.bin} assembleDebug  -b "${app-build.dir}/build.gradle" "'/>
									</exec-shell>
								</else>
							</if>
						</else>
				</if>
			<replace file="${basedir}/outputAPKVariants.properties" token="\" value="//"/>
			<ant antfile="${currentfile}"  target="publish"/> 
		</try>
		<finally>
		<if>
			<available file="${basedir}/build-drive.txt"/>
			<then>
			<java fork="true" failonerror="yes" jvm="${installer.javahome}/bin/java" jar="${SubstituteDriveJar}">
				<arg value="unsubstitute"/>
				<arg value="${subst-drive}"/>
				<arg value="${basedir}"/>
			</java>
			</then>
			</if>
	</finally>
	</trycatch>
    </target>	
	
    <target name="prepareForLibraryBuild">

        <if>
	     <equals arg1="${enablecharts2d3d}" arg2="true"/>
	     <then>
	            <copy file="${extlibs}/armeabi-v7a/libKLChartWidgetNeXt.so" tofile="${app.dir}/libs/armeabi-v7a/libKLChartWidgetNeXt.so" overwrite="true"/>
		    <copy file="${extlibs}/x86/libKLChartWidgetNeXt.so" tofile="${app.dir}/libs/x86/libKLChartWidgetNeXt.so" overwrite="true"/>
	     </then>	
        </if>
	
        <if>
	     <equals arg1="${dev.language}" arg2="js"/>
	     <then>
	            <copy file="${extlibs}/armeabi-v7a/libc++_shared.so" tofile="${app.dir}/libs/armeabi-v7a/libc++_shared.so" overwrite="true"/>
		    <copy file="${extlibs}/arm64-v8a/libc++_shared.so" tofile="${app.dir}/libs/arm64-v8a/libc++_shared.so" overwrite="true"/>
		    <copy file="${extlibs}/x86/libc++_shared.so" tofile="${app.dir}/libs/x86/libc++_shared.so" overwrite="true"/>
		    <copy file="${extlibs}/x86_64/libc++_shared.so" tofile="${app.dir}/libs/x86_64/libc++_shared.so" overwrite="true"/>
	     </then>	
        </if>
	
        <if>
	    <equals arg1="${build.option.local}" arg2="debug"/>
	    <then>
	           <copy file="${extlibs}/armeabi-v7a/libkonyjsvm_debug.so" tofile="${app.dir}/libs/armeabi-v7a/libkonyjsvm.so" overwrite="true"/>
		   <copy file="${extlibs}/arm64-v8a/libkonyjsvm_debug.so" tofile="${app.dir}/libs/arm64-v8a/libkonyjsvm.so" overwrite="true"/>
		   <copy file="${extlibs}/x86/libkonyjsvm_debug.so" tofile="${app.dir}/libs/x86/libkonyjsvm.so" overwrite="true"/>
		   <copy file="${extlibs}/x86_64/libkonyjsvm_debug.so" tofile="${app.dir}/libs/x86_64/libkonyjsvm.so" overwrite="true"/>
					
	    </then>	
	   <elseif>
                <equals arg1="${build.option.local}" arg2="release"/>
                <then>
                      <copy file="${extlibs}/armeabi-v7a/libkonyjsvm_release.so" tofile="${app.dir}/libs/armeabi-v7a/libkonyjsvm.so" overwrite="true"/>
		      <copy file="${extlibs}/arm64-v8a/libkonyjsvm_release.so" tofile="${app.dir}/libs/arm64-v8a/libkonyjsvm.so" overwrite="true"/>
		      <copy file="${extlibs}/x86/libkonyjsvm_release.so" tofile="${app.dir}/libs/x86/libkonyjsvm.so" overwrite="true"/>
		      <copy file="${extlibs}/x86_64/libkonyjsvm_release.so" tofile="${app.dir}/libs/x86_64/libkonyjsvm.so" overwrite="true"/>
		</then>	
	  </elseif>
	  <else>
               <copy file="${extlibs}/arm64-v8a/libkonyjsvm_release_protected.so" tofile="${app.dir}/libs/arm64-v8a/libkonyjsvm.so" overwrite="true"/>
	       <copy file="${extlibs}/armeabi-v7a/libkonyjsvm_release_protected.so" tofile="${app.dir}/libs/armeabi-v7a/libkonyjsvm.so" overwrite="true"/>
	       <copy file="${extlibs}/x86_64/libkonyjsvm_release_protected.so" tofile="${app.dir}/libs/x86_64/libkonyjsvm.so" overwrite="true"/>
	       <copy file="${extlibs}/x86/libkonyjsvm_release_protected.so" tofile="${app.dir}/libs/x86/libkonyjsvm.so" overwrite="true"/>
	  </else>	
        </if>
	
        <if>
	     <equals arg1="${UseSQLCipherFIPS}" arg2="true"/>
	     <then>
	       <copydir src="${extlibs}/SQLCIPHER_FIPS/libs/arm64-v8a" dest="${app.dir}/libs/arm64-v8a" /> 
		   <copydir src="${extlibs}/SQLCIPHER_FIPS/libs/armeabi-v7a" dest="${app.dir}/libs/armeabi-v7a" />
		   <copydir src="${extlibs}/CryptoLib/armeabi-v7a/"  dest="${app.dir}/assets" />
		   <copydir src="${extlibs}/CryptoLib/arm64-v8a/"  dest="${app.dir}/assets" />			
		   <copydir src="${extlibs}/SQLCIPHER_FIPS/libs/x86" dest="${app.dir}/libs/x86"/>
		   <copydir src="${extlibs}/CryptoLib/x86" dest="${app.dir}/assets"/>
	     </then>	
        </if>
	
        <if>
	    <equals arg1="${UseOpenSSLLibrary}" arg2="true"/>
	    <then>
	       <copy file="${extlibs}/CryptoWrapper/arm64-v8a/libcrypto_wrapper.so" tofile="${app.dir}/libs/arm64-v8a/libcrypto_wrapper.so" overwrite="true"/>
		   <copy file="${extlibs}/CryptoWrapper/armeabi-v7a/libcrypto_wrapper.so" tofile="${app.dir}/libs/armeabi-v7a/libcrypto_wrapper.so" overwrite="true"/>
		   <copydir src="${extlibs}/CryptoLib/armeabi-v7a/"  dest="${app.dir}/assets" />
		   <copydir src="${extlibs}/CryptoLib/arm64-v8a/"  dest="${app.dir}/assets" />				
		   <copy file="${extlibs}/CryptoWrapper/x86/libcrypto_wrapper.so" tofile="${app.dir}/libs/x86/libcrypto_wrapper.so" overwrite="true"/>
		   <copydir src="${extlibs}/CryptoLib/x86" dest="${app.dir}/assets"/>
	    </then>	
        </if>

        <concat fixlastline="yes" destfile="${assets.dir}/application.properties" append="true">
	           Package : ${package}
		   isLibrary : true
	</concat>

	<replace file="${app.dir}/build.gradle" token="applicationId" value="//applicationId"/>
	<replace file="${app.dir}/build.gradle" token="apply plugin: 'com.android.application'" value="apply plugin: 'com.android.library'"/>
	<replace file="${app.dir}/build.gradle" token="applicationVariants" value="libraryVariants"/>
	<replace file="${app.dir}/AndroidManifest.xml" token="action.MAIN" value="action.${appid}"/>
	<replace file="${app.dir}/AndroidManifest.xml" token="category.LAUNCHER" value="category.DEFAULT"/>
	<replace file="${app.dir}/AndroidManifest.xml" token="tools:replace=&quot;icon&quot;" value=""/>
	<replace file="${app.dir}/AndroidManifest.xml" token="tools:remove=&quot;supportsRtl&quot;" value=""/>
	<replaceregexp file="${app.dir}/AndroidManifest.xml" match="android:icon=&quot;@[a-zA-Z0-9]+/[a-zA-Z0-9]+&quot;" replace=""/>
	
    </target>
	
    <target name="compile">
		<if>
		      <equals arg1="${isLibraryBuild}" arg2="true"/>
		       <then>
		              <ant antfile="${currentfile}" target="prepareForLibraryBuild">
			       </ant>
			</then>
		</if>
	
	 <ant antfile="${currentfile}"  target="calculateChecksum"> 
	 </ant>

   <!-- Note incase of UniversalApp build both mobile and tablet builds are triggered in sequence .Hence we combine resources ,assets & js files of both mobile and tablet and build single binary when tablet build is executed. 
    Hence skipping compilation, publish, precompile, postcompile and cordova build tasks in mobile build to avoid duplicate execution. -->
    	<if>
     	 <not>
     	 	<equals arg1="${isUniversalApp}" arg2 ="true" />
     	 </not>
         <then>
         	<ant antfile="${currentfile}"  target="buildapk"/> 
         </then>
    	</if>	
    </target>		 
    
    <target name="publish">
    	<if>
    		<not>
    			<equals arg1="${isUniversalApp}" arg2="true"/>
    		 </not>
    		<then> 
				<loadproperties srcFile="${basedir}/outputAPKVariants.properties"/>
				<echo>Preparing the package for publish</echo>				
				<if>
					<equals arg1="${isFPbuild}" arg2="false"/>
					<then> 
						<if>
							<available file="${debug}"/>		
							<then>
								<if>
									<equals arg1="${isLibraryBuild}" arg2="true"/>
									<then>
										<ant antfile="${currentfile}" target="copy_aars" >
										   <property name="appAarFilePath" value="${debug}"/>
										</ant>	
									</then>
									<else>
										<copy file="${debug}" tofile="${dist.dir}/luavmandroid.apk"/>
									</else>
								</if>
							</then>
							<elseif>
								<available file="${release}"/>	
								<then>
									<if>
										<equals arg1="${isLibraryBuild}" arg2="true"/>
										<then>
											<ant antfile="${currentfile}" target="copy_aars" >
										   <property name="appAarFilePath" value="${release}"/>
										</ant>		
										</then>
										<else>
											<echo>Release signed ${appid}-release.apk found </echo>							
											<copy file="${release}" tofile="${dist.dir}/luavmandroid.apk"/>
										</else>
									</if>
								</then>
							</elseif>
							<else>
								<echo> build.gradle might have added Product build flavours, plain debug/release Android apk not found to copy.</echo>
							</else>							
						</if>					
				   </then>
				   <else>
						<if>
							<available file="${debug}"/>	
							<then>
								 <copy file="${debug}" tofile="${app.dir}/bin/fpapp-debug.apk" overwrite="true"/>     
							</then>
							<else>
								<echo> build.gradle might have added Product build flavours, plain debug Android apk not found to copy.</echo>							
							</else>
						</if>
				   </else>
				</if>	
	       </then>
       </if>
    </target>
	
    <target name="precompile">
     	<if>
     		<not>
     			<equals arg1="${isUniversalApp}" arg2="true" />
			</not>
     	  <then>		
        <!--Any application related setup can be done using this task prior to actual compilation
	(Ex: Copying a modified Main Activity file,adding additional project.properties)-->
        <if>
        	<available file="${resfolder}/../androidprecompiletask.xml" />
             <then>
              <if>                  
                <equals arg1="${isWatchBuild.Local}" arg2="true"/>               
                <then>
                    <ant antfile="androidprecompiletask.xml" dir="${resfolder}/../" >
        			   <property name="isMobileBuild" value="false"/>
                           <property name="isWatchBuild" value="true"/>
        		   </ant>
                </then>
                <else>
                    <ant antfile="androidprecompiletask.xml" dir="${resfolder}/../" >
        			   <property name="isMobileBuild" value="true"/>
                       <property name="isWatchBuild" value="false"/>
                    </ant>   
                </else>
              </if>
            </then>
        	<else>
        		<echo>No precompile task present</echo>
        	</else>
        </if>
       </then>
      </if>  	
    </target>
	
    <target name="postcompile">
     	<if>
     		<not>
     			<equals arg1="${isUniversalApp}" arg2="true" />
     		</not>
     	<then>	
        <!--Any post compilations tasks can be done using this task(Ex: signing the application)-->
        <if>
        	<available file="${resfolder}/../androidpostcompiletask.xml" />
             <then>
              <if>                  
                <equals arg1="${isWatchBuild.Local}" arg2="true"/>               
                <then>
                    <ant antfile="androidpostcompiletask.xml" dir="${resfolder}/../" >
        			   <property name="isMobileBuild" value="false"/>
                       <property name="isWatchBuild" value="true"/>
        		   </ant>
                </then>
                <else>
                    <ant antfile="androidpostcompiletask.xml" dir="${resfolder}/../" >
        			   <property name="isMobileBuild" value="true"/>
                       <property name="isWatchBuild" value="false"/>
                    </ant>   
                </else>
              </if>
            </then>
        	<else>
        		<echo>No postcompile task present</echo>
        	</else>
        </if>	
       </then>
      </if>  
    </target> 

     <target name="cleanupgradle">
		<replace file="${app.dir}/build.gradle" token="$COMPILE_GOOGLE_PLAY_MAPS" value=""/>		
		<replace file="${app.dir}/build.gradle" token="$COMPILE_GOOGLE_PLAY_LOCATION" value=""/>		
    </target> 
		
	 <target name="CheckForLicenses">
	  <property name="download_not_required" value="true"/>
	   <ant antfile="${extres}/gradle_dependencies.xml"  target="CreateLicenseIfNotExist"/> 
	 </target>
	 
	 <target name="calculateChecksum">
		<if>
			<equals arg1="${isFPbuild}" arg2="false"/>
			<then>
			   <ant antfile="build-jssource.xml"  target="encrypt-assets-hash-file" inheritAll="true">
					<property name="app.dir" value="${app.dir}"/>
					<property name="assets.dir" value="${assets.dir}"/>          
					<property name="jssrc.dir" value="${jssrc.dir}"/>
					<property name="packagepath" value="${packagepath}"/>
					<property name="secureappsource" value="true"/>	
					<property name="appname" value="${appname}"/>
					<property name="basedir" value="${basedir}"/>
				</ant>
			</then>
		</if>	
	 </target>

	 <target name="copy_aars">
		<mkdir dir="${dist.dir}/${appid}_aars"/>
			<copy file="${appAarFilePath}" todir="${dist.dir}/${appid}_aars"/>
			<copy todir="${dist.dir}/${appid}_aars">
				<fileset dir="${dist.dir}/${appid}/libs">
					<include name="*.aar"/>
				</fileset>
			</copy>
			<if>
			     <equals arg1="${enableCordova}" arg2="true" />
				<then>
				     <copy todir="${dist.dir}/${appid}_aars">
						<fileset dir="${dist.dir}/${appid}/CordovaAssetsLib/build/outputs/aar">
							<include name="*.aar"/>
						</fileset>
					</copy>
					<copy todir="${dist.dir}/${appid}_aars">
						<fileset dir="${dist.dir}/${appid}/CordovaAssetsLib/CordovaLib/build/outputs/aar">
							<include name="*.aar"/>
						</fileset>
					</copy>
				</then>
			</if>											
	</target>
  
    <target name="all" depends="init, copyjar, copyextlibs, renameiconpng, gen, cleanupgradle, copyassets,precompile,CheckForLicenses,configureReleaseSignInfo, compile,postcompile">
    </target>  
	
</project>
