//Android Gradle build Script:Start
import org.apache.tools.ant.taskdefs.condition.Os
import java.util.regex.Pattern


buildscript {
    repositories {
		//Gradle External Repositories
		google() 
        jcenter()
    }
    dependencies {
		//Gradle Build External Dependencies
        classpath 'com.android.tools.build:gradle:3.1.0'
        
    }
}
apply plugin: 'com.android.application'

def doExtractStringFromManifest(name) {
     def manifestFile = file(android.sourceSets.main.manifest.srcFile)
     def pattern = Pattern.compile(name + "=\"(\\S+)\"")
     def matcher = pattern.matcher(manifestFile.getText())
     matcher.find()
     return matcher.group(1)
}

dependencies {
	//Android Project Dependencies :Start
	
	
	implementation 'com.android.support:multidex:1.0.0'
    
    
	
    implementation 'com.android.support:recyclerview-v7:26.0.0'
  implementation 'com.android.support:appcompat-v7:26.0.0'
    
    
    implementation fileTree(dir: 'libs', include:[ '*.jar'])	
	
	//Android Project Dependencies :End
}

fileTree(dir: 'libs', include: '**/*.aar')
        .each { File file ->
    dependencies.add("implementation", [name: file.name.lastIndexOf('.').with { it != -1 ? file.name[0..<it] : file.name }, ext: 'aar'])
}

android {
	//Android build options:Start
	compileSdkVersion  'android-26'
    buildToolsVersion '27.0.3'
	packagingOptions {
		//Project packaging options:Start
		exclude 'META-INF/DEPENDENCIES'
		exclude 'META-INF/LICENSE'
		exclude 'META-INF/LICENSE.txt'
		exclude 'META-INF/license.txt'
		exclude 'META-INF/NOTICE'
		exclude 'META-INF/NOTICE.txt'
		exclude 'META-INF/notice.txt'
		exclude 'META-INF/ASL2.0'
		exclude 'MANIFEST.MF'
		//Project packaging options:End
	}	
    defaultConfig {
		//Project Default Config:Start
        multiDexEnabled true
        sourceSets.main {
			//Project folder mapping:Start
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jni.srcDirs = [] //disable automatic ndk-build call
            jniLibs.srcDir 'libs' //set .so files location to libs
			//Project folder mapping:End
        }
		dexOptions { 
            //Dexing Options:Start
            javaMaxHeapSize "2048M"
            //Dexing Options:End
            jumboMode true
		}
		
		renderscriptTargetApi 21
		renderscriptSupportModeEnabled true
		
		applicationId = doExtractStringFromManifest("package")
		//ABI Filters:Start
		ndk {
            abiFilters  'armeabi-v7a'
		}		
		//ABI Filters:End		
		//Project Default Config:End
		
		def keystorePropertiesFile = file("$projectDir/../keystore.properties")		
		if(keystorePropertiesFile.exists()){
			def keystoreProperties = new Properties()
			keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
			def keystoreFile = file(keystoreProperties['keyStoreFilePath'])
			if(keystoreFile.exists()){
				signingConfigs {
						release {
							keyAlias keystoreProperties['keyAlias']
							keyPassword keystoreProperties['keyPassword']
							storeFile keystoreFile
							storePassword keystoreProperties['keyStorePassword']
						}
				}
				buildTypes {
					release {
						signingConfig signingConfigs.release
						}
				}
				
		}
		}		
    }
	String apkPaths
	applicationVariants.all { variant ->
	variant.outputs.each { output ->
		
		println variant.buildType.name+"="+output.outputFile
		apkPaths=apkPaths+"\n"+variant.buildType.name+"="+output.outputFile
		
	}
	new File("outputAPKVariants.properties").text=apkPaths
    }
    //Android build options:End
}
allprojects {
    repositories {
		//Gradle Build Depencency Repositories
        maven {
            url "https://maven.google.com"
        }
        jcenter()
        flatDir { 
			dirs 'libs'
        }		
		def hasCordovaLibs = file('CordovaAssetsLib/libs').exists()
		if (hasCordovaLibs) {
			flatDir { 
				dirs 'CordovaAssetsLib/libs'
			}	
		}	
    }
}


//Android Gradle build Script:End
